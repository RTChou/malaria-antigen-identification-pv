[["index.html", "Malaria vaccine antigen identification for Plasmodium vivax Preface", " Malaria vaccine antigen identification for Plasmodium vivax Renee Ti Chou 2023-06-06 Preface Our research objective is to identify potential vaccine antigen candidates targeting the parasite P. vivax, the second most prevalent cause of malaria. To improve the performance of the autologous model for P. vivax, which has a constrained size of proteome and a small set of labeled antigens, we leverage heterologous data from P. falciparum. We utilized multiple models trained on various combinations of heterologous and autologous data using the positive-unlabeled random forest (PURF) algorithm. The research notebook contains both data and code generated in the study titled “Plasmodium vivax antigen candidate prediction improves with the addition of Plasmodium falciparum data.” Further, the notebook provides guidance on extracting protein variables and assembling machine learning input from the database, along with code for conducting experimental analyses and creating plots. The notebook is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. "],["id_01_data_engineering.html", "Section 1 Data engineering 1.1 purf package installization 1.2 Retrieving P. vivax protein variables 1.3 Generating ML input", " Section 1 Data engineering 1.1 purf package installization See instructions on the GitHub webpage. 1.2 Retrieving P. vivax protein variables In Bash: echo &quot;create database pfpv_reverse_vaccinology&quot; | mariadb -u &lt;dbuser&gt; -p mariadb -u &lt;dbuser&gt; -p pfpv_reverse_vaccinology &lt; ./other_data/pfpv_reverse_vaccinology.sql Overall database schema: In R: library(RMariaDB) library(DBI) library(rlist) output_path &lt;- &quot;./other_data/pv_assembled_data.csv&quot; db &lt;- dbConnect(RMariaDB::MariaDB(), user = &quot;root&quot;, password = &quot;&quot;, dbname = &quot;pfpv_reverse_vaccinology&quot;) get_data &lt;- function(table_name, db) { sql &lt;- sqlInterpolate(db, &quot;SELECT * FROM ?table&quot;, table = dbQuoteIdentifier(db, table_name)) return(subset(dbGetQuery(db, sql), select = -c(id))) } # protein ID and transcript ID map table id_map &lt;- dbGetQuery(db, &#39;SELECT dbxref_1.accession AS accession, dbxref_1.dbxref_id AS protein_id FROM dbxref AS dbxref_1 LEFT OUTER JOIN feature AS feature_1 ON dbxref_1.dbxref_id = feature_1.dbxref_id LEFT OUTER JOIN cvterm ON feature_1.type_id = cvterm.cvterm_id LEFT OUTER JOIN feature_relationship ON feature_1.feature_id = feature_relationship.subject_id LEFT OUTER JOIN feature AS feature_2 ON feature_relationship.object_id = feature_2.feature_id LEFT OUTER JOIN dbxref AS dbxref_2 ON feature_2.dbxref_id = dbxref_2.dbxref_id LEFT OUTER JOIN organism ON feature_1.organism_id = organism.organism_id WHERE feature_1.is_obsolete = 0 AND cvterm.name = &quot;polypeptide&quot; AND organism.species=&quot;vivax_P01&quot;&#39;) 1.2.1 Immunological data sets In R: immu &lt;- list() # predivac_processed result for T-cell epitopes immu &lt;- list.append(immu, get_data(&quot;predivac_processed&quot;, db)) # bepipred_2_0 result for B-cell epitopes immu &lt;- list.append(immu, get_data(&quot;bepipred_2_0_processed&quot;, db)) # bepipred_1_0 result for B-cell epitopes immu &lt;- list.append(immu, get_data(&quot;bepipred_1_0_processed&quot;, db)) # abcpred result for B-cell epitopes immu &lt;- list.append(immu, get_data(&quot;abcpred_processed&quot;, db)) # ctlpred result for cytotoxic T-cell epitopes immu &lt;- list.append(immu, get_data(&quot;ctlpred_processed&quot;, db)) # il_10pred result for interleukine-10 inducing epitopes immu &lt;- list.append(immu, get_data(&quot;il_10pred_processed&quot;, db)) # ifnepitope result for IFN-gamma inducing epitopes immu &lt;- list.append(immu, get_data(&quot;ifnepitope_processed&quot;, db)) # tappred for high binding affinity epitopes toward the TAP transporter immu &lt;- list.append(immu, get_data(&quot;tappred_processed&quot;, db)) # mhc_i for MHC class I epitopes immu &lt;- list.append(immu, get_data(&quot;mhc_i&quot;, db)) # mhc_ii for MHC class II epitopes immu &lt;- list.append(immu, get_data(&quot;mhc_ii&quot;, db)) # antigenicity immu &lt;- list.append(immu, get_data(&quot;antigenicity&quot;, db)) # immunogenicity immu &lt;- list.append(immu, get_data(&quot;immunogenicity&quot;, db)) # merge immunological data sets immunological_ds &lt;- id_map[&quot;protein_id&quot;] for (ds in immu) { immunological_ds &lt;- merge(x = immunological_ds, y = ds, by = &quot;protein_id&quot;, all.x = TRUE) } 1.2.2 Proteomic data sets In R: pro &lt;- list() # cello result for subcellualr localization pro &lt;- list.append(pro, subset(get_data(&quot;cello&quot;, db), select = -c(location_id))) # maap result for malaria adhesin/adhesin-like proteins pro &lt;- list.append(pro, get_data(&quot;maap&quot;, db)) # peptides result for physicochemical properties pro &lt;- list.append(pro, get_data(&quot;r_peptides&quot;, db)) # protr result for physicochemical properties pro &lt;- list.append(pro, get_data(&quot;protr&quot;, db)) # hydrophilicity pro &lt;- list.append(pro, get_data(&quot;hydrophilicity&quot;, db)) # predgpi result for gpi anchors prediction pro &lt;- list.append(pro, get_data(&quot;predgpi&quot;, db)) # signalp result for signal cleavage prediction pro &lt;- list.append(pro, subset(get_data(&quot;signalp&quot;, db), select = -c(is_secprotein, cleavage_site, cs_probability))) # abpred results for amino acid compositions and other variables pro &lt;- list.append(pro, get_data(&quot;abpred&quot;, db)) # glycoep results for N-linked and O-linked glycosylation pro &lt;- list.append(pro, get_data(&quot;glycoep_processed&quot;, db)) # blastp result for similarity to human proteins pro &lt;- list.append(pro, get_data(&quot;blastp&quot;, db)) # merge proteomic data sets proteomic_ds &lt;- id_map[&quot;protein_id&quot;] for (ds in pro) { proteomic_ds &lt;- merge(x = proteomic_ds, y = ds, by = &quot;protein_id&quot;, all.x = TRUE) } 1.2.3 Structural data sets In R: struc &lt;- list() # tmhmm result for transmembrane helices prediction struc &lt;- list.append(struc, get_data(&quot;tmhmm_processed&quot;, db)) # seg result for sequence complexity struc &lt;- list.append(struc, get_data(&quot;seg&quot;, db)) # seg + tmhmm result struc &lt;- list.append(struc, get_data(&quot;seg_processed&quot;, db)) # b_cell_epitope_methods for structural predictions struc &lt;- list.append(struc, get_data(&quot;beta_turn&quot;, db)) struc &lt;- list.append(struc, get_data(&quot;surface_accessibility&quot;, db)) struc &lt;- list.append(struc, get_data(&quot;flexibility&quot;, db)) # merge structural analysis data sets structural_ds &lt;- id_map[&quot;protein_id&quot;] for (ds in struc) { structural_ds &lt;- merge(x = structural_ds, y = ds, by = &quot;protein_id&quot;, all.x = TRUE) } 1.2.4 Genomic data sets In R: geno &lt;- list() # snp result geno &lt;- list.append(geno, get_data(&quot;snp&quot;, db)) # merge structural analysis data sets genomic_ds &lt;- id_map[&quot;protein_id&quot;] for (ds in geno) { genomic_ds &lt;- merge(x = genomic_ds, y = ds, by = &quot;protein_id&quot;, all.x = TRUE) } 1.2.5 Final assembly In R: # prepare predictor variables data &lt;- merge(x = immunological_ds, y = proteomic_ds, by = &quot;protein_id&quot;, all = FALSE) data &lt;- merge(x = data, y = structural_ds, by = &quot;protein_id&quot;, all = FALSE) data &lt;- merge(x = data, y = genomic_ds, by = &quot;protein_id&quot;, all = FALSE) data &lt;- merge(x = id_map, y = data, by = &quot;protein_id&quot;, all.x = TRUE) accession &lt;- data$accession data &lt;- subset(data, select = -c(protein_id, accession)) rownames(data) &lt;- accession # write to output write.csv(data, output_path) # close database connection dbDisconnect(db) 1.3 Generating ML input In R: response_var &lt;- read.csv(&quot;./other_data/pv_antigen_labels.csv&quot;, row.names = 1) predictor_vars &lt;- read.csv(&quot;./other_data/pv_assembled_data.csv&quot;, row.names = 1) ml_input &lt;- merge(x = response_var, y = predictor_vars, by = &quot;row.names&quot;, all = TRUE) row_names &lt;- ml_input$Row.names ml_input &lt;- subset(ml_input, select = -c(Row.names)) rownames(ml_input) &lt;- row_names # write to output write.csv(ml_input, &quot;./data/supplementary_data_2_pv_ml_input.csv&quot;) sessionInfo() ## R version 4.2.3 (2023-03-15) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Big Sur ... 10.16 ## ## Matrix products: default ## BLAS: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] rlist_0.4.6.2 DBI_1.1.3 RMariaDB_1.2.2 ## ## loaded via a namespace (and not attached): ## [1] Rcpp_1.0.10 bslib_0.4.2 compiler_4.2.3 jquerylib_0.1.4 ## [5] highr_0.10 R.methodsS3_1.8.2 R.utils_2.12.2 tools_4.2.3 ## [9] digest_0.6.31 bit_4.0.5 jsonlite_1.8.4 evaluate_0.21 ## [13] lifecycle_1.0.3 R.cache_0.16.0 pkgconfig_2.0.3 rlang_1.1.1 ## [17] cli_3.6.1 rstudioapi_0.14 yaml_2.3.7 xfun_0.39 ## [21] fastmap_1.1.1 styler_1.9.1 knitr_1.42 vctrs_0.6.2 ## [25] sass_0.4.6 hms_1.1.3 bit64_4.0.5 glue_1.6.2 ## [29] data.table_1.14.8 R6_2.5.1 rmarkdown_2.21 bookdown_0.34 ## [33] purrr_1.0.1 magrittr_2.0.3 codetools_0.2-19 htmltools_0.5.5 ## [37] cachem_1.0.8 R.oo_1.25.0 "],["id_02_model_training.html", "Section 2 Model training 2.1 Hyper-parameter tuning for PURF", " Section 2 Model training 2.1 Hyper-parameter tuning for PURF 2.1.1 Analysis In Python: library(reticulate) use_condaenv(&quot;/Users/renee/Library/r-miniconda/envs/purf/bin/python&quot;) import pandas as pd from sklearn.utils import shuffle import numpy as np import pickle from sklearn.impute import SimpleImputer from purf.pu_ensemble import PURandomForestClassifier from sklearn.preprocessing import MinMaxScaler from scipy.spatial import distance from joblib import Parallel, delayed from sklearn.ensemble._forest import _generate_unsampled_indices import os import re import session_info # private function for train_purf() def _get_ref_antigen_stats(idx, tree, X, y, ref_indices, max_samples=None): if max_samples is None: max_samples = y.shape[0] oob_indices = _generate_unsampled_indices(tree.random_state, y.shape[0], max_samples) ref_oob = [i in oob_indices for i in ref_indices] ref_pred = list() pred = tree.predict_proba(X[ref_indices,:], check_input=False) ref_pred = pred[:,1] return ref_oob, ref_pred def train_purf(features, outcome, pos_level=0.5, purf=None, tree_filtering=False, ref_antigens=None, n_jobs=1): features, outcome = shuffle(features, outcome, random_state=0) # Imputation imputer = SimpleImputer(strategy=&#39;median&#39;) X = imputer.fit_transform(features) X = pd.DataFrame(X, index=features.index, columns=features.columns) y = outcome features = X print(&#39;There are %d positives out of %d samples before feature space weighting.&#39; % (sum(y), len(y))) # Feature space weighting lab_pos = X.loc[y==1,:] median = np.median(lab_pos, axis=0) # Feature space weighting lab_pos = X.loc[y==1,:] median = np.median(lab_pos, axis=0) scaler = MinMaxScaler(feature_range=(1,10)) dist = list() for i in range(lab_pos.shape[0]): dist.append(distance.euclidean(lab_pos.iloc[i, :], median)) dist = np.asarray(dist).reshape(-1, 1) counts = np.round(scaler.fit_transform(dist)) counts = np.array(counts, dtype=np.int64)[:, 0] X_temp = X.iloc[y==1, :] X = X.iloc[y==0, :] y = np.asarray([0] * X.shape[0] + [1] * (sum(counts))) appended_data = [X] for i in range(len(counts)): appended_data.append(pd.concat([X_temp.iloc[[i]]] * counts[i])) X = pd.concat(appended_data) print(&#39;There are %d positives out of %d samples after feature space weighting.&#39; % (sum(y), len(y))) res = pd.DataFrame({&#39;protein_id&#39;: X.index, &#39;antigen_label&#39; : y}) if tree_filtering is True: # get ref antigen indices ref_index_dict = {ref:list() for ref in list(ref_antigens.values())} for i in range(res.shape[0]): if res[&#39;protein_id&#39;][i] in list(ref_antigens.values()): ref_index_dict[res[&#39;protein_id&#39;][i]].append(res.index[i]) ref_indices = sum(ref_index_dict.values(), []) # get OOB stats and predictions X = X.astype(&#39;float32&#39;) trees = purf.estimators_ idx_list = [i for i in range(len(trees))] stats_res = Parallel(n_jobs=n_jobs)( delayed(_get_ref_antigen_stats)(idx, trees[idx], np.array(X), y, ref_indices) for idx in idx_list) # ref_oob data structure: # rows represent individual trees # column represent reference antigens # cells indicate whether the reference antigen is in the OOB samples of the tree ref_oob = np.array([ref_oob for ref_oob, ref_pred in stats_res]) # ref_pred data structure: # rows represent individual trees # column represent reference antigens # cells indicate the prediction of the reference antigen by the tree ref_pred = np.array([ref_pred for ref_oob, ref_pred in stats_res]) # analyze duplicated reference antigens as a group cumsum_num_ref = np.cumsum(np.array([len(v) for k,v in ref_index_dict.items()])) ref_oob_all = np.array([ref_oob[:, 0:cumsum_num_ref[i]].any(axis=1) if i == 0 else \\ ref_oob[:, cumsum_num_ref[i - 1]:cumsum_num_ref[i]].any(axis=1) \\ for i in range(len(ref_antigens))]).T ref_pred_all = np.array([ref_pred[:, 0:cumsum_num_ref[i]].any(axis=1) if i == 0 else \\ ref_pred[:, cumsum_num_ref[i - 1]:cumsum_num_ref[i]].sum(axis=1) \\ for i in range(len(ref_antigens))]).T # calculate number of reference antigens as OOB samples for each tree oob_total = ref_oob_all.sum(axis=1) # assign score of 1 to trees that correctly predict all OOB reference antigens; otherwise, assign 0 score weights = np.zeros(len(trees)) # iterate through the trees and calculate the stats for i in range(len(trees)): oob_list = list(ref_oob_all[i,:]) pred_list = list(ref_pred_all[i,:]) if oob_total[i] == 0: weights[i] = 0 else: if sum(np.array(pred_list)[oob_list] != 0) == oob_total[i]: weights[i] = 1 if tree_filtering is False: # Training PURF purf = PURandomForestClassifier( n_estimators = 100000, oob_score = True, n_jobs = 64, random_state = 42, pos_level = pos_level ) purf.fit(X, y) else: purf._set_oob_score_with_weights(np.array(X), y.reshape(-1,1), weights=weights) # Storing results res[&#39;OOB score&#39;] = purf.oob_decision_function_[:,1] res = features.merge(res.groupby(&#39;protein_id&#39;).mean(), left_index=True, right_on=&#39;protein_id&#39;) res = res[[&#39;antigen_label&#39;, &#39;OOB score&#39;]] if tree_filtering is False: return (purf, res) else: return ({&#39;model&#39;: purf, &#39;weights&#39;: weights}, res) 2.1.1.1 Pv data set ref_antigens = {&#39;CSP&#39;: &#39;PVP01_0835600.1-p1&#39;, &#39;DBP&#39;: &#39;PVP01_0623800.1-p1&#39;, &#39;MSP1&#39;: &#39;PVP01_0728900.1-p1&#39;} data = pd.read_csv(&#39;./other_data/pv_ml_input.csv&#39;, index_col=0) features = data.iloc[:, 1:] outcome = np.array(data.antigen_label) for pos_level in [0.5, 0.4, 0.6, 0.3, 0.7, 0.2, 0.8, 0.1, 0.9]: (purf, res) = train_purf(features, outcome, pos_level=pos_level, tree_filtering=False) (purf_filtered, res_filtered) = train_purf(features, outcome, pos_level=pos_level, purf=purf, tree_filtering=True, ref_antigens=ref_antigens) res[&#39;OOB score filtered&#39;] = res_filtered[&#39;OOB score&#39;] res.to_csv(&#39;~/Downloads/pv_pos_level/%.1f_res.tsv&#39; % pos_level) with open(&#39;~/Downloads/pv_pos_level/%.1f_purf_tree_filtering.pkl&#39; % pos_level, &#39;wb&#39;) as out: pickle.dump(purf_filtered, out, pickle.HIGHEST_PROTOCOL) dir = &#39;~/Downloads/pv_pos_level/&#39; files = os.listdir(dir) tmp = pd.read_csv(dir + &#39;0.1_res.tsv&#39;, sep=&#39;\\t&#39;, index_col=0)[&#39;antigen_label&#39;] data_frames = [pd.read_csv(dir + &#39;%.1f_res.tsv&#39; % pos_level, sep=&#39;\\t&#39;, index_col=0)[&#39;OOB score filtered&#39;] for pos_level in np.arange(0.1, 1, 0.1)] merged_df = pd.concat([tmp] + data_frames, join=&#39;outer&#39;, axis=1) colnames = [&#39;antigen_label&#39;] + [&#39;%.1f&#39; % pos_level for pos_level in np.arange(0.1, 1, 0.1)] merged_df.columns = colnames merged_df.to_csv(&#39;./other_data/pv_pos_level_parameter_tuning.csv&#39;) 2.1.1.2 Pv + Pf combined data set ref_antigens = {&#39;CSP (Pf)&#39;: &#39;PF3D7_0304600.1-p1&#39;, &#39;RH5 (Pf)&#39;: &#39;PF3D7_0424100.1-p1&#39;, &#39;MSP5 (Pf)&#39;: &#39;PF3D7_0206900.1-p1&#39;, &#39;P230 (Pf)&#39;: &#39;PF3D7_0209000.1-p1&#39;, &#39;CSP (Pv)&#39;: &#39;PVP01_0835600.1-p1&#39;, &#39;DBP (Pv)&#39;: &#39;PVP01_0623800.1-p1&#39;, &#39;MSP1 (Pv)&#39;: &#39;PVP01_0728900.1-p1&#39;} data = pd.read_csv(&#39;./data/supplementary_data_4_pfpv_ml_input.csv&#39;, index_col=0) features = data.iloc[:, 1:] outcome = np.array(data.antigen_label) for pos_level in [0.5, 0.4, 0.6, 0.3, 0.7, 0.2, 0.8, 0.1, 0.9]: (purf, res) = train_purf(features, outcome, pos_level=pos_level, tree_filtering=False) (purf_filtered, res_filtered) = train_purf(features, outcome, pos_level=pos_level, purf=purf, tree_filtering=True, ref_antigens=ref_antigens) res[&#39;OOB score filtered&#39;] = res_filtered[&#39;OOB score&#39;] res.to_csv(&#39;~/Downloads/pfpv_pos_level/%.1f_res.tsv&#39; % pos_level) with open(&#39;~/Downloads/pfpv_pos_level/%.1f_purf_tree_filtering.pkl&#39; % pos_level, &#39;wb&#39;) as out: pickle.dump(purf_filtered, out, pickle.HIGHEST_PROTOCOL) dir = &#39;~/Downloads/pfpv_pos_level/&#39; files = os.listdir(dir) tmp = pd.read_csv(dir + &#39;0.1_res.tsv&#39;, sep=&#39;\\t&#39;, index_col=0)[&#39;antigen_label&#39;] data_frames = [pd.read_csv(dir + &#39;%.1f_res.tsv&#39; % pos_level, sep=&#39;\\t&#39;, index_col=0)[&#39;OOB score filtered&#39;] for pos_level in np.arange(0.1, 1, 0.1)] merged_df = pd.concat([tmp] + data_frames, join=&#39;outer&#39;, axis=1) colnames = [&#39;antigen_label&#39;] + [&#39;%.1f&#39; % pos_level for pos_level in np.arange(0.1, 1, 0.1)] merged_df.columns = colnames merged_df.to_csv(&#39;./other_data/pfpv_pos_level_parameter_tuning.csv&#39;) 2.1.2 Plotting In R: library(mixR) library(pracma) library(rlist) library(ggplot2) library(cowplot) library(grid) library(gridExtra) 2.1.2.1 Pv data set data &lt;- read.csv(&quot;./other_data/pv_pos_level_parameter_tuning.csv&quot;, header = TRUE, row.names = 1, check.names = FALSE) # Extract data with only unlabeled proteins data_unl &lt;- data[data$antigen_label == 0, ] plot_list &lt;- list() plot_list2 &lt;- list() for (i in seq(0.1, 0.9, 0.1)) { fit &lt;- mixfit(data_unl[[as.character(i)]], ncomp = 2) # Calculate receiver operating characteristic (ROC) curve # for putative positive and negative samples x &lt;- seq(-0.5, 1.5, by = 0.01) neg_cum &lt;- pnorm(x, mean = fit$mu[1], sd = fit$sd[1]) pos_cum &lt;- pnorm(x, mean = fit$mu[2], sd = fit$sd[2]) fpr &lt;- (1 - neg_cum) / ((1 - neg_cum) + neg_cum) # false positive / (false positive + true negative) tpr &lt;- (1 - pos_cum) / ((1 - pos_cum) + pos_cum) # true positive / (true positive + false negative) p &lt;- plot(fit, title = paste0( &quot;Positive level = &quot;, i, &quot; (AUROC = &quot;, round(trapz(-fpr, tpr), 2), &quot;)&quot; )) + scale_fill_manual(values = c(&quot;#0080FF&quot;, &quot;#FF007F&quot;), labels = c(&quot;Putative negative&quot;, &quot;Putative positive&quot;)) + theme_bw() + { if (i == 0.1) { theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title = element_blank(), axis.text = element_text(colour = &quot;black&quot;), plot.title = element_text(hjust = 0.5, colour = &quot;black&quot;), legend.title = element_blank(), legend.text = element_text(colour = &quot;black&quot;), legend.position = c(0.7, 0.85), legend.background = element_blank() ) } else { theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title = element_blank(), axis.text = element_text(colour = &quot;black&quot;), plot.title = element_text(hjust = 0.5, colour = &quot;black&quot;), legend.position = &quot;none&quot; ) } } + xlim(-0.8, 1.5) # Calculate percent rank for labeled positives data_ &lt;- data[c(&quot;antigen_label&quot;, as.character(i))] colnames(data_) &lt;- c(&quot;antigen_label&quot;, &quot;OOB score&quot;) data_$percent_rank &lt;- rank(data_[[&quot;OOB score&quot;]]) / nrow(data) data_ &lt;- data_[data$antigen_label == 1, ] data_ &lt;- data_[order(-data_$percent_rank), ] data_$x &lt;- 1:nrow(data_) / nrow(data_) cat(paste0(&quot;EPR: &quot;, sum(data_$`OOB score` &gt;= 0.5) / nrow(data_), &quot;\\n&quot;)) p2 &lt;- ggplot(data_, aes(x = x, y = `percent_rank`)) + geom_hline(yintercept = 0.5, linetype = &quot;dashed&quot;, color = &quot;grey50&quot;) + geom_line(linewidth = 0.1, color = &quot;grey30&quot;) + geom_point(aes(fill = `OOB score`), size = 2.2, shape = 21, color = &quot;grey30&quot;, stroke = 0.1) + scale_fill_gradient2(low = &quot;#0080FF&quot;, mid = &quot;white&quot;, high = &quot;#FF007F&quot;, midpoint = 0.5, limits = c(0, 1)) + theme_bw() + { if (i == 0.1) { theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title = element_blank(), axis.text = element_text(colour = &quot;black&quot;), plot.title = element_text(hjust = 0.5, colour = &quot;black&quot;), legend.title = element_text(hjust = 0.5, colour = &quot;black&quot;, angle = 0), legend.text = element_text(colour = &quot;black&quot;), legend.position = c(0.5, 0.15), legend.background = element_blank(), legend.title.align = -130 ) } else { theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title = element_blank(), axis.text = element_text(colour = &quot;black&quot;), plot.title = element_text(hjust = 0.5, colour = &quot;black&quot;), legend.position = &quot;none&quot; ) } } + { if (i == 0.1) { guides(fill = guide_colourbar(title.position = &quot;top&quot;, direction = &quot;horizontal&quot;)) } } + { if (i == 0.1) { labs(fill = &quot;Score (proportion of votes)&quot;) } } + ggtitle(paste0( &quot;Positive level = &quot;, i, &quot; (AUC = &quot;, round(trapz(c(0, data_$x, 1), c(1, data_$percent_rank, 0)), 2), &quot;)&quot; )) + ylim(0, 1) plot_list &lt;- list.append(plot_list, p) plot_list2 &lt;- list.append(plot_list2, p2) } 2.1.2.2 Bimodal distribution plot x_grob &lt;- textGrob(&quot;Score (proportion of votes)&quot;, gp = gpar(fontsize = 15)) y_grob &lt;- textGrob(&quot;Density&quot;, gp = gpar(fontsize = 15), rot = 90) grid.arrange(arrangeGrob(plot_grid(plotlist = plot_list, ncol = 3), left = y_grob, bottom = x_grob)) 2.1.2.3 Known antigen ranking x_grob2 &lt;- textGrob(&quot;Ranked known antigens (scaled)&quot;, gp = gpar(fontsize = 15)) y_grob2 &lt;- textGrob(&quot;Percent rank&quot;, gp = gpar(fontsize = 15), rot = 90) grid.arrange(arrangeGrob(plot_grid(plotlist = plot_list2, ncol = 3), left = y_grob2, bottom = x_grob2)) 2.1.2.4 Pv + Pf combined data set data &lt;- read.csv(&quot;./other_data/pfpv_pos_level_parameter_tuning.csv&quot;, header = TRUE, row.names = 1, check.names = FALSE) # Extract data with only unlabeled proteins data_unl &lt;- data[data$antigen_label == 0, ] plot_list3 &lt;- list() plot_list4 &lt;- list() for (i in seq(0.1, 0.9, 0.1)) { fit &lt;- mixfit(data_unl[[as.character(i)]], ncomp = 2) # Calculate receiver operating characteristic (ROC) curve # for putative positive and negative samples x &lt;- seq(-0.5, 1.5, by = 0.01) neg_cum &lt;- pnorm(x, mean = fit$mu[1], sd = fit$sd[1]) pos_cum &lt;- pnorm(x, mean = fit$mu[2], sd = fit$sd[2]) fpr &lt;- (1 - neg_cum) / ((1 - neg_cum) + neg_cum) # false positive / (false positive + true negative) tpr &lt;- (1 - pos_cum) / ((1 - pos_cum) + pos_cum) # true positive / (true positive + false negative) p &lt;- plot(fit, title = paste0( &quot;Positive level = &quot;, i, &quot; (AUROC = &quot;, round(trapz(-fpr, tpr), 3), &quot;)&quot; )) + scale_fill_manual(values = c(&quot;#0080FF&quot;, &quot;#FF007F&quot;), labels = c(&quot;Putative negative&quot;, &quot;Putative positive&quot;)) + theme_bw() + { if (i == 0.1) { theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title = element_blank(), axis.text = element_text(colour = &quot;black&quot;), plot.title = element_text(hjust = 0.5, colour = &quot;black&quot;), legend.title = element_blank(), legend.text = element_text(colour = &quot;black&quot;), legend.position = c(0.7, 0.85), legend.background = element_blank() ) } else { theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title = element_blank(), axis.text = element_text(colour = &quot;black&quot;), plot.title = element_text(hjust = 0.5, colour = &quot;black&quot;), legend.position = &quot;none&quot; ) } } + xlim(-0.8, 1.5) # Calculate percent rank for labeled positives data_ &lt;- data[c(&quot;antigen_label&quot;, as.character(i))] colnames(data_) &lt;- c(&quot;antigen_label&quot;, &quot;OOB score&quot;) data_$percent_rank &lt;- rank(data_[[&quot;OOB score&quot;]]) / nrow(data) data_ &lt;- data_[data$antigen_label == 1, ] data_ &lt;- data_[order(-data_$percent_rank), ] data_$x &lt;- 1:nrow(data_) / nrow(data_) cat(paste0(&quot;EPR: &quot;, sum(data_$`OOB score` &gt;= 0.5) / nrow(data_), &quot;\\n&quot;)) p2 &lt;- ggplot(data_, aes(x = x, y = `percent_rank`)) + geom_hline(yintercept = 0.5, linetype = &quot;dashed&quot;, color = &quot;grey50&quot;) + geom_line(linewidth = 0.1, color = &quot;grey30&quot;) + geom_point(aes(fill = `OOB score`), size = 1.2, shape = 21, color = &quot;grey30&quot;, stroke = 0.1) + scale_fill_gradient2(low = &quot;#0080FF&quot;, mid = &quot;white&quot;, high = &quot;#FF007F&quot;, midpoint = 0.5, limits = c(0, 1)) + theme_bw() + { if (i == 0.1) { theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title = element_blank(), axis.text = element_text(colour = &quot;black&quot;), plot.title = element_text(hjust = 0.5, colour = &quot;black&quot;), legend.title = element_text(hjust = 0.5, colour = &quot;black&quot;, angle = 0), legend.text = element_text(colour = &quot;black&quot;), legend.position = c(0.5, 0.15), legend.background = element_blank(), legend.title.align = -130 ) } else { theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title = element_blank(), axis.text = element_text(colour = &quot;black&quot;), plot.title = element_text(hjust = 0.5, colour = &quot;black&quot;), legend.position = &quot;none&quot; ) } } + { if (i == 0.1) { guides(fill = guide_colourbar(title.position = &quot;top&quot;, direction = &quot;horizontal&quot;)) } } + { if (i == 0.1) { labs(fill = &quot;Score (proportion of votes)&quot;) } } + ggtitle(paste0( &quot;Positive level = &quot;, i, &quot; (AUC = &quot;, round(trapz(c(0, data_$x, 1), c(1, data_$percent_rank, 0)), 2), &quot;)&quot; )) + ylim(0, 1) plot_list3 &lt;- list.append(plot_list3, p) plot_list4 &lt;- list.append(plot_list4, p2) } 2.1.2.5 Bimodal distribution plot x_grob &lt;- textGrob(&quot;Score (proportion of votes)&quot;, gp = gpar(fontsize = 15)) y_grob &lt;- textGrob(&quot;Density&quot;, gp = gpar(fontsize = 15), rot = 90) grid.arrange(arrangeGrob(plot_grid(plotlist = plot_list3, ncol = 3), left = y_grob, bottom = x_grob)) 2.1.2.6 Known antigen ranking x_grob2 &lt;- textGrob(&quot;Ranked known antigens (scaled)&quot;, gp = gpar(fontsize = 15)) y_grob2 &lt;- textGrob(&quot;Percent rank&quot;, gp = gpar(fontsize = 15), rot = 90) grid.arrange(arrangeGrob(plot_grid(plotlist = plot_list4, ncol = 3), left = y_grob2, bottom = x_grob2)) 2.1.3 Results for positive level = 0.5 plot_list[[5]]$labels$title &lt;- &quot;&quot; plot_list2[[5]]$labels$title &lt;- &quot;&quot; plot_list3[[5]]$labels$title &lt;- &quot;&quot; plot_list4[[5]]$labels$title &lt;- &quot;&quot; plot_list[[5]] &lt;- plot_list[[5]] + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title = element_blank(), axis.text = element_text(colour = &quot;black&quot;), plot.title = element_text(hjust = 0.5, colour = &quot;black&quot;), legend.title = element_blank(), legend.text = element_text(colour = &quot;black&quot;), legend.position = c(0.2, 0.91), legend.background = element_blank() ) plot_list2[[5]] &lt;- plot_list2[[5]] + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title = element_blank(), axis.text = element_text(colour = &quot;black&quot;), plot.title = element_text(hjust = 0.5, colour = &quot;black&quot;), legend.title = element_text(hjust = 0.5, colour = &quot;black&quot;, angle = 0), legend.text = element_text(colour = &quot;black&quot;), legend.position = c(0.35, 0.13), legend.background = element_blank(), legend.title.align = -130 ) + guides(fill = guide_colourbar(title.position = &quot;top&quot;, direction = &quot;horizontal&quot;)) + labs(fill = &quot;Score (proportion of votes)&quot;) x_grob &lt;- textGrob(&quot;Score (proportion of votes)&quot;, gp = gpar(fontsize = 10)) y_grob &lt;- textGrob(&quot;Density&quot;, gp = gpar(fontsize = 10), rot = 90) x_grob2 &lt;- textGrob(&quot;Ranked known antigens (scaled)&quot;, gp = gpar(fontsize = 10)) y_grob2 &lt;- textGrob(&quot;Percent rank&quot;, gp = gpar(fontsize = 10), rot = 90) plot_grid( arrangeGrob(plot_list[[5]], left = y_grob, bottom = x_grob), arrangeGrob(plot_list2[[5]], left = y_grob2, bottom = x_grob2), arrangeGrob(plot_list3[[5]], left = y_grob, bottom = x_grob), arrangeGrob(plot_list4[[5]], left = y_grob2, bottom = x_grob2), nrow = 2, labels = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;) ) sessionInfo() ## R version 4.2.3 (2023-03-15) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Big Sur ... 10.16 ## ## Matrix products: default ## BLAS: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] grid stats graphics grDevices utils datasets methods ## [8] base ## ## other attached packages: ## [1] gridExtra_2.3 cowplot_1.1.1 ggplot2_3.4.2 rlist_0.4.6.2 ## [5] pracma_2.4.2 mixR_0.2.0 reticulate_1.28 ## ## loaded via a namespace (and not attached): ## [1] styler_1.9.1 tidyselect_1.2.0 xfun_0.39 bslib_0.4.2 ## [5] purrr_1.0.1 lattice_0.21-8 colorspace_2.1-0 vctrs_0.6.2 ## [9] generics_0.1.3 htmltools_0.5.5 yaml_2.3.7 utf8_1.2.3 ## [13] rlang_1.1.1 R.oo_1.25.0 jquerylib_0.1.4 pillar_1.9.0 ## [17] glue_1.6.2 withr_2.5.0 R.utils_2.12.2 R.cache_0.16.0 ## [21] lifecycle_1.0.3 munsell_0.5.0 gtable_0.3.3 R.methodsS3_1.8.2 ## [25] codetools_0.2-19 evaluate_0.21 knitr_1.42 fastmap_1.1.1 ## [29] fansi_1.0.4 highr_0.10 Rcpp_1.0.10 scales_1.2.1 ## [33] cachem_1.0.8 jsonlite_1.8.4 png_0.1-8 digest_0.6.31 ## [37] bookdown_0.34 dplyr_1.1.2 rprojroot_2.0.3 here_1.0.1 ## [41] cli_3.6.1 tools_4.2.3 magrittr_2.0.3 sass_0.4.6 ## [45] tibble_3.2.1 pkgconfig_2.0.3 Matrix_1.5-4 data.table_1.14.8 ## [49] rmarkdown_2.21 rstudioapi_0.14 R6_2.5.1 compiler_4.2.3 session_info.show() ## ----- ## joblib 1.1.1 ## numpy 1.19.0 ## pandas 1.3.2 ## purf NA ## scipy 1.8.0 ## session_info 1.0.0 ## sklearn 0.24.2 ## ----- ## Python 3.8.2 (default, Mar 26 2020, 10:45:18) [Clang 4.0.1 (tags/RELEASE_401/final)] ## macOS-10.16-x86_64-i386-64bit ## ----- ## Session information updated at 2023-05-18 12:34 "],["id_03_model_evaluation.html", "Section 3 Model evaluation 3.1 Known antigen prediction accuracy 3.2 Adversarial controls", " Section 3 Model evaluation 3.1 Known antigen prediction accuracy 3.1.1 Analysis In Python: library(reticulate) use_condaenv(&quot;/Users/renee/Library/r-miniconda/envs/purf/bin/python&quot;) import pandas as pd from sklearn.ensemble import RandomForestClassifier import numpy as np from sklearn.impute import SimpleImputer from sklearn.preprocessing import MinMaxScaler from scipy.spatial import distance from purf.pu_ensemble import PURandomForestClassifier import pickle import os import re import session_info 3.1.1.1 Pv model cross-species predictions data_ = pd.read_csv(&#39;./other_data/pv_ml_input.csv&#39;, index_col=0) X_ = data_.iloc[:,1:] imputer = SimpleImputer(strategy=&#39;median&#39;) imputer.fit(X_) data = pd.read_csv(&#39;./other_data/pf_ml_input.csv&#39;, index_col=0) X = data.iloc[:,1:] y = np.array(data.antigen_label) pickle_path = &#39;./pv_0.5_purf_tree_filtering.pkl&#39; with open(pickle_path, &#39;rb&#39;) as infile: purf = pickle.load(infile) # Convert float type X[X.select_dtypes(np.float64).columns] = X.select_dtypes(np.float64).astype(np.float32) # Impute missing values X = imputer.transform(X) pred = purf[&#39;model&#39;].predict_proba(X)[:,1] res = pd.DataFrame({&#39;protein_id&#39;: data.index, &#39;antigen_label&#39;: y}) res[&#39;OOB score filtered&#39;] = pred res.to_csv(&#39;~/Downloads/pv_single_cross_predictions.csv&#39;, index=False) 3.1.1.2 Pf model cross-species predictions data_ = pd.read_csv(&#39;./other_data/pf_ml_input.csv&#39;, index_col=0) X_ = data_.iloc[:,1:] imputer = SimpleImputer(strategy=&#39;median&#39;) imputer.fit(X_) data = pd.read_csv(&#39;./other_data/pv_ml_input.csv&#39;, index_col=0) X = data.iloc[:,1:] y = np.array(data.antigen_label) pickle_path = &#39;./pf_0.5_purf_tree_filtering.pkl&#39; with open(pickle_path, &#39;rb&#39;) as infile: purf = pickle.load(infile) # Convert float type X[X.select_dtypes(np.float64).columns] = X.select_dtypes(np.float64).astype(np.float32) # Impute missing values X = imputer.transform(X) pred = purf[&#39;model&#39;].predict_proba(X)[:,1] res = pd.DataFrame({&#39;protein_id&#39;: data.index, &#39;antigen_label&#39;: y}) res[&#39;OOB score filtered&#39;] = pred res.to_csv(&#39;~/Downloads/pf_single_cross_predictions.csv&#39;, index=False) In R: library(DT) single_model_res &lt;- read.csv(&quot;./other_data/pf_single_pv_single_scores.csv&quot;, check.names = FALSE) cross_pred_res &lt;- read.csv(&quot;./other_data/pf_single_pv_single_cross_predictions.csv&quot;, check.names = FALSE) combined_model_res &lt;- read.csv(&quot;./data/supplementary_data_5_pfpv_purf_oob_predictions.csv&quot;, check.names = FALSE) df &lt;- data.frame( &quot;PURF model&quot; = c(&quot;Pv single model&quot;, &quot;Pf single model&quot;, &quot;Pv + Pf combined model&quot;), &quot;Accuracy for Pv known antigens&quot; = c( paste0( nrow(single_model_res[single_model_res$antigen_label == 1 &amp; single_model_res$species == &quot;pv&quot; &amp; single_model_res$`OOB score filtered` &gt;= 0.5, ]), &quot; / &quot;, nrow(single_model_res[single_model_res$antigen_label == 1 &amp; single_model_res$species == &quot;pv&quot;, ]), &quot; = &quot;, sprintf(&quot;%0.2f&quot;, nrow(single_model_res[single_model_res$antigen_label == 1 &amp; single_model_res$species == &quot;pv&quot; &amp; single_model_res$`OOB score filtered` &gt;= 0.5, ]) / nrow(single_model_res[single_model_res$antigen_label == 1 &amp; single_model_res$species == &quot;pv&quot;, ])) ), paste0( nrow(cross_pred_res[cross_pred_res$antigen_label == 1 &amp; cross_pred_res$species == &quot;pv&quot; &amp; cross_pred_res$`OOB score filtered` &gt;= 0.5, ]), &quot; / &quot;, nrow(cross_pred_res[cross_pred_res$antigen_label == 1 &amp; cross_pred_res$species == &quot;pv&quot;, ]), &quot; = &quot;, sprintf(&quot;%0.2f&quot;, nrow(cross_pred_res[cross_pred_res$antigen_label == 1 &amp; cross_pred_res$species == &quot;pv&quot; &amp; cross_pred_res$`OOB score filtered` &gt;= 0.5, ]) / nrow(cross_pred_res[cross_pred_res$antigen_label == 1 &amp; cross_pred_res$species == &quot;pv&quot;, ])) ), paste0( nrow(combined_model_res[combined_model_res$antigen_label == 1 &amp; combined_model_res$species == &quot;pv&quot; &amp; combined_model_res$`OOB score filtered` &gt;= 0.5, ]), &quot; / &quot;, nrow(combined_model_res[combined_model_res$antigen_label == 1 &amp; combined_model_res$species == &quot;pv&quot;, ]), &quot; = &quot;, sprintf(&quot;%0.2f&quot;, nrow(combined_model_res[combined_model_res$antigen_label == 1 &amp; combined_model_res$species == &quot;pv&quot; &amp; combined_model_res$`OOB score filtered` &gt;= 0.5, ]) / nrow(combined_model_res[combined_model_res$antigen_label == 1 &amp; combined_model_res$species == &quot;pv&quot;, ])) ) ), &quot;Accuracy for Pf known antigens&quot; = c( paste0( nrow(cross_pred_res[cross_pred_res$antigen_label == 1 &amp; cross_pred_res$species == &quot;pf&quot; &amp; cross_pred_res$`OOB score filtered` &gt;= 0.5, ]), &quot; / &quot;, nrow(cross_pred_res[cross_pred_res$antigen_label == 1 &amp; cross_pred_res$species == &quot;pf&quot;, ]), &quot; = &quot;, sprintf(&quot;%0.2f&quot;, nrow(cross_pred_res[cross_pred_res$antigen_label == 1 &amp; cross_pred_res$species == &quot;pf&quot; &amp; cross_pred_res$`OOB score filtered` &gt;= 0.5, ]) / nrow(cross_pred_res[cross_pred_res$antigen_label == 1 &amp; cross_pred_res$species == &quot;pf&quot;, ])) ), paste0( nrow(single_model_res[single_model_res$antigen_label == 1 &amp; single_model_res$species == &quot;pf&quot; &amp; single_model_res$`OOB score filtered` &gt;= 0.5, ]), &quot; / &quot;, nrow(single_model_res[single_model_res$antigen_label == 1 &amp; single_model_res$species == &quot;pf&quot;, ]), &quot; = &quot;, sprintf(&quot;%0.2f&quot;, nrow(single_model_res[single_model_res$antigen_label == 1 &amp; single_model_res$species == &quot;pf&quot; &amp; single_model_res$`OOB score filtered` &gt;= 0.5, ]) / nrow(single_model_res[single_model_res$antigen_label == 1 &amp; single_model_res$species == &quot;pf&quot;, ])) ), paste0( nrow(combined_model_res[combined_model_res$antigen_label == 1 &amp; combined_model_res$species == &quot;pf&quot; &amp; combined_model_res$`OOB score filtered` &gt;= 0.5, ]), &quot; / &quot;, nrow(combined_model_res[combined_model_res$antigen_label == 1 &amp; combined_model_res$species == &quot;pf&quot;, ]), &quot; = &quot;, sprintf(&quot;%0.2f&quot;, nrow(combined_model_res[combined_model_res$antigen_label == 1 &amp; combined_model_res$species == &quot;pf&quot; &amp; combined_model_res$`OOB score filtered` &gt;= 0.5, ]) / nrow(combined_model_res[combined_model_res$antigen_label == 1 &amp; combined_model_res$species == &quot;pf&quot;, ])) ) ), check.names = FALSE ) save(df, file = &quot;./rdata/known_antigen_pred_acc.RData&quot;) load(&quot;./rdata/known_antigen_pred_acc.RData&quot;) df %&gt;% datatable(rownames = FALSE) pv_antigens &lt;- single_model_res[single_model_res$antigen_label == 1 &amp; single_model_res$species == &quot;pv&quot;, ]$protein_id pv_model_pf_antigens &lt;- cross_pred_res[cross_pred_res$antigen_label == 1 &amp; cross_pred_res$species == &quot;pf&quot; &amp; cross_pred_res$`OOB score filtered` &gt;= 0.5, ]$protein_id pv_model_pv_antigens &lt;- single_model_res[single_model_res$antigen_label == 1 &amp; single_model_res$species == &quot;pv&quot; &amp; single_model_res$`OOB score filtered` &gt;= 0.5, ]$protein_id pf_antigens &lt;- single_model_res[single_model_res$antigen_label == 1 &amp; single_model_res$species == &quot;pf&quot;, ]$protein_id pf_model_pf_antigens &lt;- single_model_res[single_model_res$antigen_label == 1 &amp; single_model_res$species == &quot;pf&quot; &amp; single_model_res$`OOB score filtered` &gt;= 0.5, ]$protein_id pf_model_pv_antigens &lt;- cross_pred_res[cross_pred_res$antigen_label == 1 &amp; cross_pred_res$species == &quot;pv&quot; &amp; cross_pred_res$`OOB score filtered` &gt;= 0.5, ]$protein_id pv_intersect &lt;- intersect(pf_model_pv_antigens, pv_model_pv_antigens) pf_intersect &lt;- intersect(pf_model_pf_antigens, pv_model_pf_antigens) pv_union &lt;- union(pf_model_pv_antigens, pv_model_pv_antigens) pf_union &lt;- union(pf_model_pf_antigens, pv_model_pf_antigens) df &lt;- data.frame( &quot;Set&quot; = c(&quot;Pv model only&quot;, &quot;Intersect&quot;, &quot;Pf model only&quot;, &quot;Complement&quot;), &quot;Pv known antigens&quot; = c( paste(pv_model_pv_antigens[!pv_model_pv_antigens %in% pv_intersect], collapse = &quot;, &quot;), length(pv_intersect), paste(pf_model_pv_antigens[!pf_model_pv_antigens %in% pv_intersect], collapse = &quot;, &quot;), paste(pv_antigens[!pv_antigens %in% pv_union], collapse = &quot;, &quot;) ), &quot;Pf known antigens&quot; = c( paste(pv_model_pf_antigens[!pv_model_pf_antigens %in% pf_intersect], collapse = &quot;, &quot;), length(pf_intersect), paste(pf_model_pf_antigens[!pf_model_pf_antigens %in% pf_intersect], collapse = &quot;, &quot;), paste(pf_antigens[!pf_antigens %in% pf_union], collapse = &quot;, &quot;) ), check.names = FALSE ) save(df, file = &quot;./rdata/known_antigen_pred_set_analysis.RData&quot;) load(&quot;./rdata/known_antigen_pred_set_analysis.RData&quot;) df %&gt;% datatable(rownames = FALSE) 3.2 Adversarial controls 3.2.1 Analysis In Python: library(reticulate) use_condaenv(&quot;/Users/renee/Library/r-miniconda/envs/purf/bin/python&quot;) import pandas as pd from sklearn.utils import shuffle import numpy as np import pickle from sklearn.impute import SimpleImputer from purf.pu_ensemble import PURandomForestClassifier from sklearn.preprocessing import MinMaxScaler from scipy.spatial import distance from joblib import Parallel, delayed from sklearn.ensemble._forest import _generate_unsampled_indices import os import re import session_info # private function for train_purf() def _get_ref_antigen_stats(idx, tree, X, y, ref_indices, max_samples=None): if max_samples is None: max_samples = y.shape[0] oob_indices = _generate_unsampled_indices(tree.random_state, y.shape[0], max_samples) ref_oob = [i in oob_indices for i in ref_indices] ref_pred = list() pred = tree.predict_proba(X[ref_indices,:], check_input=False) ref_pred = pred[:,1] return ref_oob, ref_pred def train_purf(features, outcome, pos_level=0.5, purf=None, tree_filtering=False, ref_antigens=None, n_jobs=1): features, outcome = shuffle(features, outcome, random_state=0) # Imputation imputer = SimpleImputer(strategy=&#39;median&#39;) X = imputer.fit_transform(features) X = pd.DataFrame(X, index=features.index, columns=features.columns) y = outcome features = X print(&#39;There are %d positives out of %d samples before feature space weighting.&#39; % (sum(y), len(y))) # Feature space weighting lab_pos = X.loc[y==1,:] median = np.median(lab_pos, axis=0) # Feature space weighting lab_pos = X.loc[y==1,:] median = np.median(lab_pos, axis=0) scaler = MinMaxScaler(feature_range=(1,10)) dist = list() for i in range(lab_pos.shape[0]): dist.append(distance.euclidean(lab_pos.iloc[i, :], median)) dist = np.asarray(dist).reshape(-1, 1) counts = np.round(scaler.fit_transform(dist)) counts = np.array(counts, dtype=np.int64)[:, 0] X_temp = X.iloc[y==1, :] X = X.iloc[y==0, :] y = np.asarray([0] * X.shape[0] + [1] * (sum(counts))) appended_data = [X] for i in range(len(counts)): appended_data.append(pd.concat([X_temp.iloc[[i]]] * counts[i])) X = pd.concat(appended_data) print(&#39;There are %d positives out of %d samples after feature space weighting.&#39; % (sum(y), len(y))) res = pd.DataFrame({&#39;protein_id&#39;: X.index, &#39;antigen_label&#39; : y}) if tree_filtering is True: # get ref antigen indices ref_index_dict = {ref:list() for ref in list(ref_antigens.values())} for i in range(res.shape[0]): if res[&#39;protein_id&#39;][i] in list(ref_antigens.values()): ref_index_dict[res[&#39;protein_id&#39;][i]].append(res.index[i]) ref_indices = sum(ref_index_dict.values(), []) # get OOB stats and predictions X = X.astype(&#39;float32&#39;) trees = purf.estimators_ idx_list = [i for i in range(len(trees))] stats_res = Parallel(n_jobs=n_jobs)( delayed(_get_ref_antigen_stats)(idx, trees[idx], np.array(X), y, ref_indices) for idx in idx_list) # ref_oob data structure: # rows represent individual trees # column represent reference antigens # cells indicate whether the reference antigen is in the OOB samples of the tree ref_oob = np.array([ref_oob for ref_oob, ref_pred in stats_res]) # ref_pred data structure: # rows represent individual trees # column represent reference antigens # cells indicate the prediction of the reference antigen by the tree ref_pred = np.array([ref_pred for ref_oob, ref_pred in stats_res]) # analyze duplicated reference antigens as a group cumsum_num_ref = np.cumsum(np.array([len(v) for k,v in ref_index_dict.items()])) ref_oob_all = np.array([ref_oob[:, 0:cumsum_num_ref[i]].any(axis=1) if i == 0 else \\ ref_oob[:, cumsum_num_ref[i - 1]:cumsum_num_ref[i]].any(axis=1) \\ for i in range(len(ref_antigens))]).T ref_pred_all = np.array([ref_pred[:, 0:cumsum_num_ref[i]].any(axis=1) if i == 0 else \\ ref_pred[:, cumsum_num_ref[i - 1]:cumsum_num_ref[i]].sum(axis=1) \\ for i in range(len(ref_antigens))]).T # calculate number of reference antigens as OOB samples for each tree oob_total = ref_oob_all.sum(axis=1) # assign score of 1 to trees that correctly predict all OOB reference antigens; otherwise, assign 0 score weights = np.zeros(len(trees)) # iterate through the trees and calculate the stats for i in range(len(trees)): oob_list = list(ref_oob_all[i,:]) pred_list = list(ref_pred_all[i,:]) if oob_total[i] == 0: weights[i] = 0 else: if sum(np.array(pred_list)[oob_list] != 0) == oob_total[i]: weights[i] = 1 if tree_filtering is False: # Training PURF purf = PURandomForestClassifier( n_estimators = 100000, oob_score = True, n_jobs = 64, random_state = 42, pos_level = pos_level ) purf.fit(X, y) else: purf._set_oob_score_with_weights(np.array(X), y.reshape(-1,1), weights=weights) # Storing results res[&#39;OOB score&#39;] = purf.oob_decision_function_[:,1] res = features.merge(res.groupby(&#39;protein_id&#39;).mean(), left_index=True, right_on=&#39;protein_id&#39;) res = res[[&#39;antigen_label&#39;, &#39;OOB score&#39;]] if tree_filtering is False: return (purf, res) else: return ({&#39;model&#39;: purf, &#39;weights&#39;: weights}, res) 3.2.1.1 Pv data set ref_antigens = {&#39;CSP&#39;: &#39;PVP01_0835600.1-p1&#39;, &#39;DBP&#39;: &#39;PVP01_0623800.1-p1&#39;, &#39;MSP1&#39;: &#39;PVP01_0728900.1-p1&#39;} data = pd.read_csv(&#39;./other_data/pv_ml_input.csv&#39;, index_col=0) features = data.iloc[:, 1:] outcome = np.array(data.antigen_label) for (idx, (antigen, out)) in enumerate(zip(features.index, outcome)): if out == 1: if antigen in ref_antigens.values(): continue outcome_ = outcome.copy() outcome_[idx] = 0 (purf, res) = train_purf(features, outcome_, pos_level=0.5, tree_filtering=False) (purf_filtered, res_filtered) = train_purf(features, outcome_, pos_level=0.5, purf=purf, tree_filtering=True, ref_antigens=ref_antigens) res_filtered.to_csv(&#39;~/Downloads/pv_jackknife/&#39; + antigen + &#39;_res.csv&#39;) dir = &#39;~/Downloads/pv_jackknife/&#39; files = os.listdir(dir) for file in files: if file.endswith(&#39;csv&#39;): tmp = pd.read_csv(dir + file, index_col=0)[&#39;antigen_label&#39;] break data_frames = [pd.read_csv(dir + file, index_col=0)[&#39;OOB score&#39;] for file in files if file.endswith(&#39;csv&#39;)] merged_df = pd.concat([tmp] + data_frames, join=&#39;outer&#39;, axis=1) colnames = [&#39;antigen_label&#39;] + [re.match(&#39;PVP01_[0-9]+\\.[0-9]-p1&#39;, file)[0] for file in files if file.endswith(&#39;csv&#39;)] merged_df.columns = colnames merged_df.to_csv(&#39;./other_data/pv_adversarial_controls.csv&#39;) 3.2.1.2 Pv + Pf combined data set ref_antigens = {&#39;CSP (Pf)&#39;: &#39;PF3D7_0304600.1-p1&#39;, &#39;RH5 (Pf)&#39;: &#39;PF3D7_0424100.1-p1&#39;, &#39;MSP5 (Pf)&#39;: &#39;PF3D7_0206900.1-p1&#39;, &#39;P230 (Pf)&#39;: &#39;PF3D7_0209000.1-p1&#39;, &#39;CSP (Pv)&#39;: &#39;PVP01_0835600.1-p1&#39;, &#39;DBP (Pv)&#39;: &#39;PVP01_0623800.1-p1&#39;, &#39;MSP1 (Pv)&#39;: &#39;PVP01_0728900.1-p1&#39;} data = pd.read_csv(&#39;./data/supplementary_data_4_pfpv_ml_input.csv&#39;, index_col=0) features = data.iloc[:, 1:] outcome = np.array(data.antigen_label) for (idx, (antigen, out)) in enumerate(zip(features.index, outcome)): if out == 1: if antigen in ref_antigens.values(): continue outcome_ = outcome.copy() outcome_[idx] = 0 (purf, res) = train_purf(features, outcome_, pos_level=0.5, tree_filtering=False) (purf_filtered, res_filtered) = train_purf(features, outcome_, pos_level=0.5, purf=purf, tree_filtering=True, ref_antigens=ref_antigens) res_filtered.to_csv(&#39;~/Downloads/pfpv_jackknife/&#39; + antigen + &#39;_res.csv&#39;) dir = &#39;~/Downloads/pfpv_jackknife/&#39; files = os.listdir(dir) for file in files: if file.endswith(&#39;csv&#39;): tmp = pd.read_csv(dir + file, index_col=0)[&#39;antigen_label&#39;] break data_frames = [pd.read_csv(dir + file, index_col=0)[&#39;OOB score&#39;] for file in files if file.endswith(&#39;csv&#39;)] merged_df = pd.concat([tmp] + data_frames, join=&#39;outer&#39;, axis=1) colnames = [&#39;antigen_label&#39;] + [re.match(&#39;PF3D7_[0-9]+\\.[0-9]-p1&#39;, file)[0] if file.startswith(&#39;PF3D7&#39;) else re.match(&#39;PVP01_[0-9]+\\.[0-9]-p1&#39;, file)[0] for file in files if file.endswith(&#39;csv&#39;)] merged_df.columns = colnames merged_df.to_csv(&#39;./other_data/pfpv_adversarial_controls.csv&#39;) 3.2.2 Plotting In R: library(ggplot2) library(ggdist) library(gghalves) library(cowplot) library(grid) library(ggbeeswarm) library(ggpubr) pv_data &lt;- read.csv(&quot;./data/supplementary_data_3_pv_purf_oob_predictions.csv&quot;, check.names = FALSE, row.names = 1) pf_data &lt;- read.csv(&quot;./other_data/pf_single_pv_single_scores.csv&quot;, check.names = FALSE, row.names = 1) pfpv_data &lt;- read.csv(&quot;./data/supplementary_data_5_pfpv_purf_oob_predictions.csv&quot;, check.names = FALSE, row.names = 1) pv_ad_ctrl &lt;- read.csv(&quot;./other_data/pv_adversarial_controls.csv&quot;, check.names = FALSE, row.names = 1) pf_ad_ctrl &lt;- read.csv(&quot;./other_data/pf_adversarial_controls.csv&quot;, check.names = FALSE, row.names = 1) pfpv_ad_ctrl &lt;- read.csv(&quot;./other_data/pfpv_adversarial_controls.csv&quot;, check.names = FALSE, row.names = 1) 3.2.2.1 Mean differences in scores pv_products &lt;- read.csv(&quot;./other_data/pvp01_gene_products_v62.csv&quot;, row.names = 1) pf_products &lt;- read.csv(&quot;./other_data/pf3d7_gene_products_v62.csv&quot;, row.names = 1) gene_products &lt;- rbind(pf_products, pv_products) calculate_known_antigen_scores &lt;- function(validation_data, baseline_scores) { scores &lt;- c() for (i in 2:ncol(validation_data)) { known_antigen &lt;- sort(colnames(validation_data))[i] other_antigens &lt;- sort(colnames(validation_data))[-c(1, i)] scores &lt;- c(scores, mean(validation_data[other_antigens, known_antigen] - baseline_scores[other_antigens, ])) } names(scores) &lt;- sort(colnames(validation_data))[2:ncol(validation_data)] return(scores) } pv_ad_ctrl_scores &lt;- calculate_known_antigen_scores(pv_ad_ctrl, pv_data[&quot;OOB score filtered&quot;]) pf_ad_ctrl_scores &lt;- calculate_known_antigen_scores(pf_ad_ctrl, pf_data[rownames(pf_ad_ctrl), &quot;OOB score filtered&quot;, drop = FALSE]) pfpv_ad_ctrl_scores &lt;- calculate_known_antigen_scores(pfpv_ad_ctrl, pfpv_data[&quot;OOB score filtered&quot;]) pv_ad_ctrl_res &lt;- data.frame( &quot;score&quot; = pv_ad_ctrl_scores, &quot;gene_product&quot; = gene_products[names(pv_ad_ctrl_scores), &quot;gene_product&quot;], row.names = names(pv_ad_ctrl_scores) ) pv_ad_ctrl_res$source &lt;- &quot;Intersect&quot; literature &lt;- c( &quot;PVP01_0102300.1-p1&quot;, &quot;PVP01_0118900.1-p1&quot;, &quot;PVP01_0202200.1-p1&quot;, &quot;PVP01_0205500.1-p1&quot;, &quot;PVP01_0210500.1-p1&quot;, &quot;PVP01_0304300.1-p1&quot;, &quot;PVP01_0317900.1-p1&quot;, &quot;PVP01_0418300.1-p1&quot;, &quot;PVP01_0418400.1-p1&quot;, &quot;PVP01_0529100.1-p1&quot;, &quot;PVP01_0532400.1-p1&quot;, &quot;PVP01_0616000.1-p1&quot;, &quot;PVP01_0616100.1-p1&quot;, &quot;PVP01_0701200.1-p1&quot;, &quot;PVP01_0707700.1-p1&quot;, &quot;PVP01_1026000.1-p1&quot;, &quot;PVP01_1030900.1-p1&quot;, &quot;PVP01_1129100.1-p1&quot; ) IEDB &lt;- c( &quot;PVP01_0106200.1-p1&quot;, &quot;PVP01_0106300.1-p1&quot;, &quot;PVP01_0215600.1-p1&quot;, &quot;PVP01_0307400.1-p1&quot;, &quot;PVP01_0522300.1-p1&quot;, &quot;PVP01_0813700.1-p1&quot;, &quot;PVP01_0829000.1-p1&quot;, &quot;PVP01_0835600.1-p1&quot;, &quot;PVP01_0923000.1-p1&quot;, &quot;PVP01_0932400.1-p1&quot;, &quot;PVP01_1240600.1-p1&quot;, &quot;PVP01_1306000.1-p1&quot;, &quot;PVP01_1412900.1-p1&quot;, &quot;PVP01_1453900.1-p1&quot; ) pv_ad_ctrl_res$source[rownames(pv_ad_ctrl_res) %in% literature] &lt;- &quot;Literature&quot; pv_ad_ctrl_res$source[rownames(pv_ad_ctrl_res) %in% IEDB] &lt;- &quot;IEDB&quot; pfpv_ad_ctrl_res &lt;- data.frame( &quot;score&quot; = pfpv_ad_ctrl_scores, &quot;gene_product&quot; = gene_products[names(pfpv_ad_ctrl_scores), &quot;gene_product&quot;], row.names = names(pfpv_ad_ctrl_scores) ) pfpv_ad_ctrl_res$source &lt;- &quot;Intersect&quot; pfpv_ad_ctrl_res$source[rownames(pfpv_ad_ctrl_res) %in% literature] &lt;- &quot;Literature&quot; pfpv_ad_ctrl_res$source[rownames(pfpv_ad_ctrl_res) %in% IEDB] &lt;- &quot;IEDB&quot; write.csv(pv_ad_ctrl_res, file = &quot;./other_data/pv_ad_ctrl_res.csv&quot;, row.names = TRUE) write.csv(pfpv_ad_ctrl_res, file = &quot;./other_data/pfpv_ad_ctrl_res.csv&quot;, row.names = TRUE) pv_ad_ctrl_res &lt;- read.csv(&quot;./other_data/pv_ad_ctrl_res.csv&quot;, row.names = 1) pfpv_ad_ctrl_res &lt;- read.csv(&quot;./other_data/pfpv_ad_ctrl_res.csv&quot;, row.names = 1) data_ &lt;- data.frame( group = factor(c( rep(0, length(pv_ad_ctrl_scores)), rep(1, length(pf_ad_ctrl_scores)), rep(2, length(pfpv_ad_ctrl_scores)) )), score = c(pv_ad_ctrl_scores, pf_ad_ctrl_scores, pfpv_ad_ctrl_scores) ) p &lt;- ggplot(data_, aes(x = group, y = score)) + geom_hline(yintercept = 0, color = &quot;grey80&quot;, linetype = &quot;dashed&quot;) + ggdist::stat_halfeye(aes(color = group, fill = group), adjust = 0.5, width = 0.7, .width = 0, justification = -0.1, point_colour = NA, alpha = 0.9) + geom_boxplot(aes(color = group), width = 0.1, outlier.color = NA, lwd = 0.5, show.legend = FALSE) + gghalves::geom_half_point(aes(fill = group), side = &quot;l&quot;, range_scale = 0.4, alpha = 0.6, shape = 21, color = &quot;black&quot;, stroke = 0.1, size = 2) + coord_flip() + scale_color_manual(values = c(&quot;#03a1fc&quot;, &quot;#984EA3&quot;, &quot;#FF7F00&quot;)) + scale_fill_manual(values = c(&quot;#03a1fc&quot;, &quot;#984EA3&quot;, &quot;#FF7F00&quot;)) + scale_x_discrete( breaks = c(0, 1, 2), labels = c( expression(paste(italic(&quot;P. vivax&quot;), &quot; model&quot;)), expression(paste(italic(&quot;P. falciparum&quot;), &quot; model&quot;)), &quot;Combined model&quot; ), limits = rev ) + theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title.x = element_text(colour = &quot;black&quot;), axis.title.y = element_blank(), axis.text = element_text(colour = &quot;black&quot;), plot.title = element_text(hjust = 0.5, colour = &quot;black&quot;), plot.margin = ggplot2::margin(5, 5, 5, 5, &quot;pt&quot;), legend.title = element_blank(), legend.text = element_text(colour = &quot;black&quot;), legend.position = &quot;none&quot; ) + ylab(&quot;Mean difference in scores (proportion of votes)&quot;) png( file = &quot;./figures/Supplementary Fig 5.png&quot;, width = 5000, height = 2000, res = 600 ) print(p) dev.off() pdf(file = &quot;../supplementary_figures/Supplementary Fig 5.pdf&quot;, width = 10, height = 4) print(p) dev.off() 3.2.2.2 Investigation of known antigen groups library(umap) library(ggplot2) library(ggrepel) library(cowplot) pv_ad_ctrl_res &lt;- read.csv(&quot;./other_data/pv_ad_ctrl_res.csv&quot;, row.names = 1) # pv_ad_ctrl_res = pv_ad_ctrl_res[pv_ad_ctrl_res$source != &#39;Intersect&#39;, ] pv_ad_ctrl_res$score_group &lt;- &quot;&quot; pv_ad_ctrl_res$score_group[pv_ad_ctrl_res$score &lt; 0.01] &lt;- &quot;Group 1&quot; pv_ad_ctrl_res$score_group[pv_ad_ctrl_res$score &gt;= 0.01] &lt;- &quot;Group 2&quot; table(pv_ad_ctrl_res$score_group, pv_ad_ctrl_res$source) ## ## IEDB Intersect Literature ## Group 1 11 2 3 ## Group 2 2 2 15 fisher.test(pv_ad_ctrl_res$score_group, pv_ad_ctrl_res$source) ## ## Fisher&#39;s Exact Test for Count Data ## ## data: pv_ad_ctrl_res$score_group and pv_ad_ctrl_res$source ## p-value = 0.0002597 ## alternative hypothesis: two.sided pfpv_ad_ctrl_res &lt;- read.csv(&quot;./other_data/pfpv_ad_ctrl_res.csv&quot;, row.names = 1) # pfpv_ad_ctrl_res = pfpv_ad_ctrl_res[pfpv_ad_ctrl_res$source != &#39;Intersect&#39;, ] pfpv_ad_ctrl_res$score_group &lt;- &quot;&quot; pfpv_ad_ctrl_res$score_group[pfpv_ad_ctrl_res$score &lt; -0.09] &lt;- &quot;Group 1&quot; pfpv_ad_ctrl_res$score_group[pfpv_ad_ctrl_res$score &gt;= -0.09] &lt;- &quot;Group 2&quot; table(pfpv_ad_ctrl_res$score_group, pfpv_ad_ctrl_res$source) ## ## IEDB Intersect Literature ## Group 1 12 27 2 ## Group 2 1 25 16 fisher.test(pfpv_ad_ctrl_res$score_group, pfpv_ad_ctrl_res$source) ## ## Fisher&#39;s Exact Test for Count Data ## ## data: pfpv_ad_ctrl_res$score_group and pfpv_ad_ctrl_res$source ## p-value = 1.176e-05 ## alternative hypothesis: two.sided pfpv_ad_ctrl_res &lt;- read.csv(&quot;./other_data/pfpv_ad_ctrl_res.csv&quot;, row.names = 1) pfpv_ad_ctrl_res$score_group &lt;- &quot;&quot; pfpv_ad_ctrl_res$score_group[pfpv_ad_ctrl_res$score &lt; -0.09] &lt;- &quot;Group 1&quot; pfpv_ad_ctrl_res$score_group[pfpv_ad_ctrl_res$score &gt;= -0.09] &lt;- &quot;Group 2&quot; pfpv_ad_ctrl_res$species &lt;- &quot;&quot; pfpv_ad_ctrl_res$species[startsWith(rownames(pfpv_ad_ctrl_res), &quot;PF3D7&quot;)] &lt;- &quot;Pf&quot; pfpv_ad_ctrl_res$species[startsWith(rownames(pfpv_ad_ctrl_res), &quot;PVP01&quot;)] &lt;- &quot;Pv&quot; table(pfpv_ad_ctrl_res$score_group, pfpv_ad_ctrl_res$species) ## ## Pf Pv ## Group 1 25 16 ## Group 2 23 19 fisher.test(pfpv_ad_ctrl_res$score_group, pfpv_ad_ctrl_res$species) ## ## Fisher&#39;s Exact Test for Count Data ## ## data: pfpv_ad_ctrl_res$score_group and pfpv_ad_ctrl_res$species ## p-value = 0.6584 ## alternative hypothesis: true odds ratio is not equal to 1 ## 95 percent confidence interval: ## 0.4934941 3.3881568 ## sample estimates: ## odds ratio ## 1.286776 3.2.2.3 Labeled known antigen accuracies calculate_known_antigen_accuracies &lt;- function(validation_data, baseline_scores) { accuracies &lt;- c() for (i in 2:ncol(validation_data)) { known_antigen &lt;- sort(colnames(validation_data))[i] other_antigens &lt;- sort(colnames(validation_data))[-c(1, i)] accuracies &lt;- c(accuracies, sum(validation_data[other_antigens, known_antigen] &gt;= 0.5) / length(validation_data[other_antigens, known_antigen])) } return(accuracies) } pv_ad_ctrl_accuracies &lt;- calculate_known_antigen_accuracies(pv_ad_ctrl, pv_data[&quot;OOB score filtered&quot;]) pf_ad_ctrl_accuracies &lt;- calculate_known_antigen_accuracies(pf_ad_ctrl, pf_data[rownames(pf_ad_ctrl), &quot;OOB score filtered&quot;, drop = FALSE]) pfpv_ad_ctrl_accuracies &lt;- calculate_known_antigen_accuracies(pfpv_ad_ctrl, pfpv_data[&quot;OOB score filtered&quot;]) df &lt;- data.frame( &quot;PURF model&quot; = c(&quot;Pv single model&quot;, &quot;Pf single model&quot;, &quot;Pv + Pf combined model&quot;), &quot;Accuracy (mean ± SD)&quot; = c( paste0( sprintf(&quot;%0.2f&quot;, mean(pv_ad_ctrl_accuracies)), &quot; ± &quot;, sprintf(&quot;%0.2f&quot;, sd(pv_ad_ctrl_accuracies)) ), paste0( sprintf(&quot;%0.2f&quot;, mean(pf_ad_ctrl_accuracies)), &quot; ± &quot;, sprintf(&quot;%0.2f&quot;, sd(pf_ad_ctrl_accuracies)) ), paste0( sprintf(&quot;%0.2f&quot;, mean(pfpv_ad_ctrl_accuracies)), &quot; ± &quot;, sprintf(&quot;%0.2f&quot;, sd(pfpv_ad_ctrl_accuracies)) ) ), check.names = FALSE ) save(df, file = &quot;./rdata/ad_ctrl_pred_accuracy.RData&quot;) load(&quot;./rdata/ad_ctrl_pred_accuracy.RData&quot;) df %&gt;% datatable(rownames = FALSE) sessionInfo() ## R version 4.2.3 (2023-03-15) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Big Sur ... 10.16 ## ## Matrix products: default ## BLAS: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] grid stats graphics grDevices utils datasets methods ## [8] base ## ## other attached packages: ## [1] ggrepel_0.9.3 umap_0.2.10.0 ggpubr_0.6.0 ggbeeswarm_0.7.2 ## [5] cowplot_1.1.1 gghalves_0.1.4 ggdist_3.2.1 ggplot2_3.4.2 ## [9] DT_0.27 reticulate_1.28 ## ## loaded via a namespace (and not attached): ## [1] Rcpp_1.0.10 here_1.0.1 lattice_0.21-8 ## [4] tidyr_1.3.0 png_0.1-8 rprojroot_2.0.3 ## [7] digest_0.6.31 utf8_1.2.3 RSpectra_0.16-1 ## [10] R6_2.5.1 backports_1.4.1 evaluate_0.21 ## [13] highr_0.10 pillar_1.9.0 rlang_1.1.1 ## [16] rstudioapi_0.14 car_3.1-2 jquerylib_0.1.4 ## [19] R.utils_2.12.2 R.oo_1.25.0 Matrix_1.5-4 ## [22] rmarkdown_2.21 styler_1.9.1 htmlwidgets_1.6.2 ## [25] munsell_0.5.0 broom_1.0.4 compiler_4.2.3 ## [28] vipor_0.4.5 xfun_0.39 askpass_1.1 ## [31] pkgconfig_2.0.3 htmltools_0.5.5 openssl_2.0.6 ## [34] tidyselect_1.2.0 tibble_3.2.1 bookdown_0.34 ## [37] codetools_0.2-19 fansi_1.0.4 dplyr_1.1.2 ## [40] withr_2.5.0 R.methodsS3_1.8.2 distributional_0.3.2 ## [43] jsonlite_1.8.4 gtable_0.3.3 lifecycle_1.0.3 ## [46] magrittr_2.0.3 scales_1.2.1 carData_3.0-5 ## [49] cli_3.6.1 cachem_1.0.8 farver_2.1.1 ## [52] ggsignif_0.6.4 bslib_0.4.2 ellipsis_0.3.2 ## [55] generics_0.1.3 vctrs_0.6.2 tools_4.2.3 ## [58] R.cache_0.16.0 glue_1.6.2 beeswarm_0.4.0 ## [61] purrr_1.0.1 crosstalk_1.2.0 abind_1.4-5 ## [64] fastmap_1.1.1 yaml_2.3.7 colorspace_2.1-0 ## [67] rstatix_0.7.2 knitr_1.42 sass_0.4.6 session_info.show() ## ----- ## joblib 1.1.1 ## numpy 1.19.0 ## pandas 1.3.2 ## purf NA ## scipy 1.8.0 ## session_info 1.0.0 ## sklearn 0.24.2 ## ----- ## Python 3.8.2 (default, Mar 26 2020, 10:45:18) [Clang 4.0.1 (tags/RELEASE_401/final)] ## macOS-10.16-x86_64-i386-64bit ## ----- ## Session information updated at 2023-05-18 12:34 "],["id_04_model_comparisons.html", "Section 4 Model comparisons 4.1 Known antigen score comparisons 4.2 Known antigen prediction summary 4.3 Score and species association 4.4 Tree depth analysis", " Section 4 Model comparisons 4.1 Known antigen score comparisons In R: library(ggplot2) library(reshape2) library(ggdist) library(gghalves) library(cowplot) pv_scores &lt;- read.csv(&quot;./other_data/pv_known_antigen_scores.csv&quot;, row.names = 1) pv_unl_scores &lt;- read.csv(&quot;./other_data/pv_unlabeled_protein_scores.csv&quot;, row.names = 1) pv_scores$label &lt;- 2 pv_unl_scores$label &lt;- 1 data_ &lt;- melt(rbind(pv_scores, pv_unl_scores), id.vars = &quot;label&quot;) data_$variable &lt;- factor(data_$variable, levels = c( &quot;pf_single_model&quot;, &quot;pv_single_model&quot;, &quot;pv_pf_pos&quot;, &quot;pfpv_combined_model&quot;, &quot;pv_pf_unl&quot; )) data_$label[data_$value &lt; 0.5 &amp; data_$label == 1] &lt;- 0 set.seed(12) p1 &lt;- ggplot(data_, aes(x = variable, y = value)) + geom_hline(yintercept = 0.5, color = &quot;grey70&quot;, linetype = &quot;dashed&quot;) + stat_halfeye(aes(fill = factor(label, levels = c(2, 1, 0))), slab_color = &quot;black&quot;, slab_linewidth = 0.2, adjust = 0.5, width = 0.5, .width = 0, justification = -0.2, point_colour = NA, alpha = 0.6, normalize = &quot;all&quot; ) + geom_boxplot(aes(fill = factor(label, levels = c(2, 1, 0))), width = 0.2, outlier.color = NA, lwd = 0.3, show.legend = FALSE, alpha = 0.6, color = &quot;black&quot; ) + geom_half_point( data = data_[data_$label == 2, ], fill = &quot;#FCB40A&quot;, side = &quot;l&quot;, range_scale = 0.3, alpha = 0.8, shape = 21, color = &quot;black&quot;, stroke = 0.1, size = 2 ) + scale_fill_manual( name = &quot;&quot;, values = c(&quot;#FCB40A&quot;, &quot;#FF007F&quot;, &quot;#0080FF&quot;), breaks = c(2, 1, 0), labels = c(&quot;Known antigen&quot;, &quot;Predicted antigen&quot;, &quot;Predicted non-antigen&quot;) ) + scale_color_manual( name = &quot;&quot;, values = c(&quot;#FCB40A&quot;, &quot;#FF007F&quot;, &quot;#0080FF&quot;), breaks = c(2, 1, 0), labels = c(&quot;Known antigen&quot;, &quot;Predicted antigen&quot;, &quot;Predicted non-antigen&quot;) ) + coord_flip() + scale_x_discrete( breaks = c( &quot;pf_single_model&quot;, &quot;pv_single_model&quot;, &quot;pv_pf_pos&quot;, &quot;pfpv_combined_model&quot;, &quot;pv_pf_unl&quot; ), labels = c( &quot;Heterologous model&quot;, &quot;Autologous model&quot;, &quot;Autologous with\\n heterologous positives model&quot;, &quot;Combined model&quot;, &quot;Autologous with\\n heterologous unlabeled model&quot; ), limits = rev ) + theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title.x = element_text(colour = &quot;black&quot;), axis.title.y = element_blank(), axis.text = element_text(colour = &quot;black&quot;), plot.title = element_text(hjust = 0.5, colour = &quot;black&quot;), plot.margin = ggplot2::margin(5, 5, 5, 5, &quot;pt&quot;), legend.position = &quot;none&quot; ) + ylim(0, 1) + ylab(&quot;Score (proportion of votes)&quot;) legend &lt;- get_legend(p2 + theme( legend.direction = &quot;horizontal&quot;, legend.position = &quot;bottom&quot;, legend.title = element_blank() ) + guides(fill = guide_legend(title = &quot;&quot;))) pf_scores &lt;- read.csv(&quot;./other_data/pf_known_antigen_scores.csv&quot;, row.names = 1) pf_unl_scores &lt;- read.csv(&quot;./other_data/pf_unlabeled_protein_scores.csv&quot;, row.names = 1) pf_scores$label &lt;- 2 pf_unl_scores$label &lt;- 1 data_ &lt;- melt(rbind(pf_scores, pf_unl_scores), id.vars = &quot;label&quot;) data_$variable &lt;- factor(data_$variable, levels = c( &quot;pv_single_model&quot;, &quot;pf_single_model&quot;, &quot;pf_pv_pos&quot;, &quot;pfpv_combined_model&quot;, &quot;pf_pv_unl&quot; )) data_$label[data_$value &lt; 0.5 &amp; data_$label == 1] &lt;- 0 set.seed(12) p2 &lt;- ggplot(data_, aes(x = variable, y = value)) + geom_hline(yintercept = 0.5, color = &quot;grey70&quot;, linetype = &quot;dashed&quot;) + stat_halfeye(aes(fill = factor(label, levels = c(2, 1, 0))), slab_color = &quot;black&quot;, slab_linewidth = 0.2, adjust = 0.5, width = 0.5, .width = 0, justification = -0.2, point_colour = NA, alpha = 0.6, normalize = &quot;all&quot; ) + geom_boxplot(aes(fill = factor(label, levels = c(2, 1, 0))), width = 0.2, outlier.color = NA, lwd = 0.3, show.legend = FALSE, alpha = 0.6, color = &quot;black&quot; ) + geom_half_point( data = data_[data_$label == 2, ], fill = &quot;#FCB40A&quot;, side = &quot;l&quot;, range_scale = 0.3, alpha = 0.8, shape = 21, color = &quot;black&quot;, stroke = 0.1, size = 2 ) + scale_fill_manual( name = &quot;&quot;, values = c(&quot;#FCB40A&quot;, &quot;#FF007F&quot;, &quot;#0080FF&quot;), breaks = c(2, 1, 0), labels = c(&quot;Known antigen&quot;, &quot;Predicted antigen&quot;, &quot;Predicted non-antigen&quot;) ) + scale_color_manual( name = &quot;&quot;, values = c(&quot;#FCB40A&quot;, &quot;#FF007F&quot;, &quot;#0080FF&quot;), breaks = c(2, 1, 0), labels = c(&quot;Known antigen&quot;, &quot;Predicted antigen&quot;, &quot;Predicted non-antigen&quot;) ) + coord_flip() + scale_x_discrete( breaks = c( &quot;pv_single_model&quot;, &quot;pf_single_model&quot;, &quot;pf_pv_pos&quot;, &quot;pfpv_combined_model&quot;, &quot;pf_pv_unl&quot; ), labels = c( &quot;Heterologous model&quot;, &quot;Autologous model&quot;, &quot;Autologous with\\n heterologous positives model&quot;, &quot;Combined model&quot;, &quot;Autologous with\\n heterologous unlabeled model&quot; ), limits = rev ) + theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title.x = element_text(colour = &quot;black&quot;), axis.title.y = element_blank(), axis.text = element_text(colour = &quot;black&quot;), plot.title = element_text(hjust = 0.5, colour = &quot;black&quot;), plot.margin = ggplot2::margin(5, 5, 5, 5, &quot;pt&quot;), legend.title = element_blank(), legend.text = element_text(colour = &quot;black&quot;), legend.position = &quot;none&quot; ) + ylim(0, 1) + ylab(&quot;Score (proportion of votes)&quot;) p_combined &lt;- plot_grid(p1, p2, plot_grid(NULL, legend, rel_widths = c(0.2, 0.8)), ncol = 2, rel_heights = c(1, 0.1), labels = c(&quot;a&quot;, &quot;b&quot;, &quot;&quot;, &quot;&quot;) ) p_combined png(file = &quot;./figures/Fig 2.png&quot;, width = 7500, height = 4000, res = 600) print(p_combined) dev.off() pdf(file = &quot;../figures/Fig 2.pdf&quot;, width = 13, height = 7) print(p_combined) dev.off() 4.2 Known antigen prediction summary In R: library(pracma) library(ggsci) pv_scores &lt;- read.csv(&quot;./other_data/pv_known_antigen_scores.csv&quot;, row.names = 1) pv_unl_scores &lt;- read.csv(&quot;./other_data/pv_unlabeled_protein_scores.csv&quot;, row.names = 1) pv_scores$label &lt;- 1 pv_unl_scores$label &lt;- 0 pv_all &lt;- rbind(pv_scores, pv_unl_scores) data &lt;- data.frame( &quot;antigen_label&quot; = pv_all$label, &quot;Heterologous model&quot; = pv_all$pf_single_model, &quot;Autologous model&quot; = pv_all$pv_single_model, &quot;Autologous with heterologous positives model&quot; = pv_all$pv_pf_pos, &quot;Combined model&quot; = pv_all$pfpv_combined_model, &quot;Autologous with heterologous unlabeled model&quot; = pv_all$pv_pf_unl, check.names = FALSE ) # Calculate percent rank for labeled positives model_names &lt;- c() x &lt;- c() percent_rank &lt;- c() auc &lt;- c() for (model in colnames(data)[-1]) { data_ &lt;- data[c(&quot;antigen_label&quot;, model)] percent_rank_ &lt;- (rank(data_[[model]]) / nrow(data))[data$antigen_label == 1] percent_rank &lt;- c(percent_rank, percent_rank_[order(-percent_rank_)]) data_ &lt;- data_[data$antigen_label == 1, ] data_ &lt;- data_[order(-percent_rank_), ] x_ &lt;- 1:nrow(data_) / nrow(data_) x &lt;- c(x, x_) model_names &lt;- c(model_names, rep(model, nrow(data_))) auc &lt;- c(auc, round(trapz(c(0, x_, 1), c(1, percent_rank_, 0)), 2)) cat(paste0(&quot;EPR: &quot;, sum(data_[[model]] &gt;= 0.5) / nrow(data_), &quot;\\n&quot;)) } names(auc) &lt;- colnames(data)[-1] res &lt;- data.frame(model = model_names, x = x, percent_rank = percent_rank) p1 &lt;- ggplot(res, aes(x = x, y = `percent_rank`, group = model)) + geom_hline(yintercept = 0.5, linetype = &quot;dashed&quot;, color = &quot;grey50&quot;) + geom_line(linewidth = 0.1, color = &quot;grey30&quot;) + geom_point(aes(fill = model), size = 2.2, shape = 21, color = &quot;grey30&quot;, stroke = 0.1, alpha = 0.8 ) + scale_fill_jco( breaks = colnames(data)[-1][order(-auc)], labels = sapply(colnames(data)[-1][order(-auc)], function(x) { paste0( x, &quot; (AUC = &quot;, auc[x], &quot;)&quot; ) }) ) + theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title = element_text(colour = &quot;black&quot;), axis.text = element_text(colour = &quot;black&quot;), plot.title = element_text(hjust = 0.5, colour = &quot;black&quot;), legend.title = element_text(hjust = 0.5, colour = &quot;black&quot;, angle = 0), legend.text = element_text(colour = &quot;black&quot;), legend.position = c(0.34, 0.16), legend.background = element_blank(), legend.key = element_rect(colour = &quot;transparent&quot;, fill = &quot;transparent&quot;) ) + labs(fill = &quot;&quot;) + ylim(0, 1) + xlab(&quot;Ranked known antigens (scaled)&quot;) + ylab(&quot;Percent rank&quot;) pf_scores &lt;- read.csv(&quot;./other_data/pf_known_antigen_scores.csv&quot;, row.names = 1) pf_unl_scores &lt;- read.csv(&quot;./other_data/pf_unlabeled_protein_scores.csv&quot;, row.names = 1) pf_scores$label &lt;- 1 pf_unl_scores$label &lt;- 0 pf_all &lt;- rbind(pf_scores, pf_unl_scores) data &lt;- data.frame( &quot;antigen_label&quot; = pf_all$label, &quot;Heterologous model&quot; = pf_all$pv_single_model, &quot;Autologous model&quot; = pf_all$pf_single_model, &quot;Autologous with heterologous positives model&quot; = pf_all$pf_pv_pos, &quot;Combined model&quot; = pf_all$pfpv_combined_model, &quot;Autologous with heterologous unlabeled model&quot; = pf_all$pf_pv_unl, check.names = FALSE ) # Calculate percent rank for labeled positives model_names &lt;- c() x &lt;- c() percent_rank &lt;- c() auc &lt;- c() for (model in colnames(data)[-1]) { data_ &lt;- data[c(&quot;antigen_label&quot;, model)] percent_rank_ &lt;- (rank(data_[[model]]) / nrow(data))[data$antigen_label == 1] percent_rank &lt;- c(percent_rank, percent_rank_[order(-percent_rank_)]) data_ &lt;- data_[data$antigen_label == 1, ] data_ &lt;- data_[order(-percent_rank_), ] x_ &lt;- 1:nrow(data_) / nrow(data_) x &lt;- c(x, x_) model_names &lt;- c(model_names, rep(model, nrow(data_))) auc &lt;- c(auc, round(trapz(c(0, x_, 1), c(1, percent_rank_, 0)), 2)) cat(paste0(&quot;EPR: &quot;, sum(data_[[model]] &gt;= 0.5) / nrow(data_), &quot;\\n&quot;)) } names(auc) &lt;- colnames(data)[-1] res &lt;- data.frame(model = model_names, x = x, percent_rank = percent_rank) p2 &lt;- ggplot(res, aes(x = x, y = `percent_rank`, group = model)) + geom_hline(yintercept = 0.5, linetype = &quot;dashed&quot;, color = &quot;grey50&quot;) + geom_line(linewidth = 0.1, color = &quot;grey30&quot;) + geom_point(aes(fill = model), size = 2.2, shape = 21, color = &quot;grey30&quot;, stroke = 0.1, alpha = 0.8 ) + scale_fill_jco( breaks = colnames(data)[-1][order(-auc)], labels = sapply(colnames(data)[-1][order(-auc)], function(x) { paste0( x, &quot; (AUC = &quot;, auc[x], &quot;)&quot; ) }) ) + theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title = element_text(colour = &quot;black&quot;), axis.text = element_text(colour = &quot;black&quot;), plot.title = element_text(hjust = 0.5, colour = &quot;black&quot;), legend.title = element_text(hjust = 0.5, colour = &quot;black&quot;, angle = 0), legend.text = element_text(colour = &quot;black&quot;), legend.position = c(0.34, 0.16), legend.background = element_blank(), legend.key = element_rect(colour = &quot;transparent&quot;, fill = &quot;transparent&quot;) ) + labs(fill = &quot;&quot;) + ylim(0, 1) + xlab(&quot;Ranked known antigens (scaled)&quot;) + ylab(&quot;Percent rank&quot;) p_combined &lt;- plot_grid(p1, p2, nrow = 1, labels = c(&quot;a&quot;, &quot;b&quot;)) p_combined png(file = &quot;./figures/Supplementary Fig 6.png&quot;, width = 7600, height = 3500, res = 600) print(p_combined) dev.off() pdf(file = &quot;../supplementary_figures/Supplementary Fig 6.pdf&quot;, width = 15.2, height = 7) print(p_combined) dev.off() 4.3 Score and species association In R: library(scales) library(rlist) library(rcompanion) library(DT) scientific &lt;- function(x) { ifelse(x == 0, &quot;0&quot;, gsub(&quot;e&quot;, &quot; * 10^&quot;, scientific_format(digits = 3)(x))) } contingency_table &lt;- list() chisq_pval &lt;- c() cramer_res &lt;- list() # Combined data &lt;- read.csv(&quot;./data/supplementary_data_5_pfpv_purf_oob_predictions.csv&quot;, check.names = FALSE, row.names = 1) pred &lt;- sapply(data$`OOB score filtered`[data$antigen_label == 0], function(x) if (x &gt;= 0.5) &quot;pos&quot; else &quot;neg&quot;) species &lt;- data$species[data$antigen_label == 0] M &lt;- table(pred, species) Xsq &lt;- chisq.test(M, correct = FALSE) cramerV &lt;- cramerV(M, ci = TRUE) contingency_table &lt;- list.append(contingency_table, M) chisq_pval &lt;- c(chisq_pval, Xsq$p.value) cramer_res &lt;- list.append(cramer_res, sprintf(&quot;%0.2f&quot;, cramerV)) # P. vivax &amp; P. falciparum single models data_1 &lt;- read.csv(&quot;./other_data/pf_single_pv_single_scores.csv&quot;, check.names = FALSE, row.names = 1) data_2 &lt;- read.csv(&quot;./other_data/pf_single_pv_single_cross_predictions.csv&quot;, check.names = FALSE, row.names = 1) pred_1 &lt;- sapply(data_1$`OOB score filtered`[data_1$antigen_label == 0], function(x) if (x &gt;= 0.5) &quot;pos&quot; else &quot;neg&quot;) species_1 &lt;- data_1$species[data_1$antigen_label == 0] pred_2 &lt;- sapply(data_2$`OOB score filtered`[data_2$antigen_label == 0], function(x) if (x &gt;= 0.5) &quot;pos&quot; else &quot;neg&quot;) species_2 &lt;- data_2$species[data_2$antigen_label == 0] ## P. vivax M &lt;- table( c(pred_1[species_1 == &quot;pv&quot;], pred_2[species_2 == &quot;pf&quot;]), c(rep(&quot;pv&quot;, length(pred_1[species_1 == &quot;pv&quot;])), rep(&quot;pf&quot;, length(pred_2[species_2 == &quot;pf&quot;]))) ) Xsq &lt;- chisq.test(M, correct = FALSE) cramerV &lt;- cramerV(M, ci = TRUE) contingency_table &lt;- list.append(contingency_table, M) chisq_pval &lt;- c(chisq_pval, Xsq$p.value) cramer_res &lt;- list.append(cramer_res, sprintf(&quot;%0.2f&quot;, cramerV)) ## P. falciparum M &lt;- table( c(pred_1[species_1 == &quot;pf&quot;], pred_2[species_2 == &quot;pv&quot;]), c(rep(&quot;pf&quot;, length(pred_1[species_1 == &quot;pf&quot;])), rep(&quot;pv&quot;, length(pred_2[species_2 == &quot;pv&quot;]))) ) Xsq &lt;- chisq.test(M, correct = FALSE) cramerV &lt;- cramerV(M, ci = TRUE) contingency_table &lt;- list.append(contingency_table, M) chisq_pval &lt;- c(chisq_pval, Xsq$p.value) cramer_res &lt;- list.append(cramer_res, sprintf(&quot;%0.2f&quot;, cramerV)) # P. vivax with heterologous positives data &lt;- read.csv(&quot;./other_data/pv_pf_pos_scores.csv&quot;, check.names = FALSE, row.names = 1) pred &lt;- sapply(data$`OOB scores`[data$antigen_label == 0], function(x) if (x &gt;= 0.5) &quot;pos&quot; else &quot;neg&quot;) species &lt;- data$species[data$antigen_label == 0] M &lt;- table(pred, species) Xsq &lt;- chisq.test(M, correct = FALSE) cramerV &lt;- cramerV(M, ci = TRUE) contingency_table &lt;- list.append(contingency_table, M) chisq_pval &lt;- c(chisq_pval, Xsq$p.value) cramer_res &lt;- list.append(cramer_res, sprintf(&quot;%0.2f&quot;, cramerV)) # P. falciparum with heterologous positives data &lt;- read.csv(&quot;./other_data/pf_pv_pos_scores.csv&quot;, check.names = FALSE, row.names = 1) pred &lt;- sapply(data$`OOB scores`[data$antigen_label == 0], function(x) if (x &gt;= 0.5) &quot;pos&quot; else &quot;neg&quot;) species &lt;- data$species[data$antigen_label == 0] M &lt;- table(pred, species) Xsq &lt;- chisq.test(M, correct = FALSE) cramerV &lt;- cramerV(M, ci = TRUE) contingency_table &lt;- list.append(contingency_table, M) chisq_pval &lt;- c(chisq_pval, Xsq$p.value) cramer_res &lt;- list.append(cramer_res, sprintf(&quot;%0.2f&quot;, cramerV)) # P. vivax with heterologous unlabeled data &lt;- read.csv(&quot;./other_data/pv_pf_unl_scores.csv&quot;, check.names = FALSE, row.names = 1) pred &lt;- sapply(data$`OOB scores`[data$antigen_label == 0], function(x) if (x &gt;= 0.5) &quot;pos&quot; else &quot;neg&quot;) species &lt;- data$species[data$antigen_label == 0] M &lt;- table(pred, species) Xsq &lt;- chisq.test(M, correct = FALSE) cramerV &lt;- cramerV(M, ci = TRUE) contingency_table &lt;- list.append(contingency_table, M) chisq_pval &lt;- c(chisq_pval, Xsq$p.value) cramer_res &lt;- list.append(cramer_res, sprintf(&quot;%0.2f&quot;, cramerV)) # P. falciparum with heterologous unlabeled data &lt;- read.csv(&quot;./other_data/pf_pv_unl_scores.csv&quot;, check.names = FALSE, row.names = 1) pred &lt;- sapply(data$`OOB scores`[data$antigen_label == 0], function(x) if (x &gt;= 0.5) &quot;pos&quot; else &quot;neg&quot;) species &lt;- data$species[data$antigen_label == 0] M &lt;- table(pred, species) Xsq &lt;- chisq.test(M, correct = FALSE) cramerV &lt;- cramerV(M, ci = TRUE) contingency_table &lt;- list.append(contingency_table, M) chisq_pval &lt;- c(chisq_pval, Xsq$p.value) cramer_res &lt;- list.append(cramer_res, sprintf(&quot;%0.2f&quot;, cramerV)) # Save results df &lt;- as.data.frame(cbind( c( &quot;Combined&quot;, &quot;P. vivax&quot;, &quot;P. falciparum&quot;, &quot;P. vivax with heterologous positives&quot;, &quot;P. falciparum with heterologous positives&quot;, &quot;P. vivax with heterologous unlabeled&quot;, &quot;P. falciparum with heterologous unlabeled&quot; ), chisq_pval, do.call(rbind, cramer_res) )) colnames(df) &lt;- c(&quot;PURF model&quot;, &quot;Chi-squared test p-value&quot;, &quot;Cramer&#39;s V&quot;, &quot;Lower CI&quot;, &quot;Upper CI&quot;) df$`Chi-squared test p-value` &lt;- sapply(as.numeric(df$`Chi-squared test p-value`), scientific) names(contingency_table) &lt;- df$`PURF model` save(contingency_table, df, file = &quot;./rdata/score_species_association.RData&quot;) load(&quot;./rdata/score_species_association.RData&quot;) contingency_table ## $Combined ## species ## pred pf pv ## neg 2719 3814 ## pos 2622 2639 ## ## $`P. falciparum` ## ## pf pv ## neg 2897 3091 ## pos 2444 3362 ## ## $`P. vivax` ## ## pf pv ## neg 2451 3618 ## pos 2890 2835 ## ## $`P. falciparum with heterologous positives` ## species ## pred pf pv ## neg 2932 63 ## pos 2409 6390 ## ## $`P. vivax with heterologous positives` ## species ## pred pf pv ## neg 0 3695 ## pos 5341 2758 ## ## $`P. falciparum with heterologous unlabeled` ## species ## pred pf pv ## neg 108 6314 ## pos 5233 139 ## ## $`P. vivax with heterologous unlabeled` ## species ## pred pf pv ## neg 5133 1055 ## pos 208 5398 df %&gt;% datatable(rownames = FALSE) 4.4 Tree depth analysis 4.4.1 Analysis In Python: library(reticulate) use_condaenv(&quot;/Users/renee/Library/r-miniconda/envs/purf/bin/python&quot;) import pandas as pd import numpy as np import pickle from purf.pu_ensemble import PURandomForestClassifier import session_info with open(&#39;./pickle_data/pf_0.5_purf_tree_filtering.pkl&#39;, &#39;rb&#39;) as infile: pf_single_model = pickle.load(infile) with open(&#39;./pickle_data/pv_0.5_purf_tree_filtering.pkl&#39;, &#39;rb&#39;) as infile: pv_single_model = pickle.load(infile) with open(&#39;./pickle_data/pfpv_0.5_purf_tree_filtering.pkl&#39;, &#39;rb&#39;) as infile: pfpv_combined_model = pickle.load(infile) with open(&#39;./pickle_data/pf_pv_pos_purf.pkl&#39;, &#39;rb&#39;) as infile: pf_pv_pos_model = pickle.load(infile) with open(&#39;./pickle_data/pf_pv_unl_purf.pkl&#39;, &#39;rb&#39;) as infile: pf_pv_unl_model = pickle.load(infile) with open(&#39;./pickle_data/pv_pf_pos_purf.pkl&#39;, &#39;rb&#39;) as infile: pv_pf_pos_model = pickle.load(infile) with open(&#39;./pickle_data/pv_pf_unl_purf.pkl&#39;, &#39;rb&#39;) as infile: pv_pf_unl_model = pickle.load(infile) res = pd.DataFrame({&#39;pf_single_model&#39;: [tree.get_depth() for tree in pf_single_model[&#39;model&#39;].estimators_], &#39;pv_single_model&#39;: [tree.get_depth() for tree in pv_single_model[&#39;model&#39;].estimators_], &#39;pfpv_combined_model&#39;: [tree.get_depth() for tree in pfpv_combined_model[&#39;model&#39;].estimators_], &#39;pf_pv_pos_model&#39;: [tree.get_depth() for tree in pf_pv_pos_model[&#39;model&#39;].estimators_], &#39;pf_pv_unl_model&#39;: [tree.get_depth() for tree in pf_pv_unl_model[&#39;model&#39;].estimators_], &#39;pv_pf_pos_model&#39;: [tree.get_depth() for tree in pv_pf_pos_model[&#39;model&#39;].estimators_], &#39;pv_pf_unl_model&#39;: [tree.get_depth() for tree in pv_pf_unl_model[&#39;model&#39;].estimators_]}) res.to_csv(&#39;./other_data/tree_depths.csv&#39;, index=False) In R 4.4.2 Plotting library(psych) library(ggrepel) data &lt;- read.csv(&quot;./other_data/tree_depths.csv&quot;) proportion_positives &lt;- c(52 / 5393, 90 / 5431, 52 / 11846, 38 / 6491, 90 / 6543, 38 / 11832, 90 / 11884) mean_tree_depth &lt;- c( mean(data$pf_single_model), mean(data$pf_pv_pos_model), mean(data$pf_pv_unl_model), mean(data$pv_single_model), mean(data$pv_pf_pos_model), mean(data$pv_pf_unl_model), mean(data$pfpv_combined_model) ) sd_tree_depth &lt;- c( sd(data$pf_single_model), sd(data$pf_pv_pos_model), sd(data$pf_pv_unl_model), sd(data$pv_single_model), sd(data$pv_pf_pos_model), sd(data$pv_pf_unl_model), sd(data$pfpv_combined_model) ) cat(&quot;~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~\\n&quot;) ## ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~ cat(&quot;No transformation\\n&quot;) ## No transformation cat(&quot;~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~\\n&quot;) ## ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~ res &lt;- lm(mean_tree_depth ~ proportion_positives, data = data.frame( proportion_positives = proportion_positives, mean_tree_depth = mean_tree_depth ) ) summary(res) ## ## Call: ## lm(formula = mean_tree_depth ~ proportion_positives, data = data.frame(proportion_positives = proportion_positives, ## mean_tree_depth = mean_tree_depth)) ## ## Residuals: ## 1 2 3 4 5 6 7 ## -0.12948 -0.97473 -1.25954 0.10225 0.04435 -1.13048 3.34764 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 3.269 1.411 2.317 0.0683 . ## proportion_positives 366.882 143.355 2.559 0.0507 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.735 on 5 degrees of freedom ## Multiple R-squared: 0.5671, Adjusted R-squared: 0.4805 ## F-statistic: 6.55 on 1 and 5 DF, p-value: 0.05069 cat(&quot;~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~\\n&quot;) ## ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~ cat(&quot;Log transform for tree depth\\n&quot;) ## Log transform for tree depth cat(&quot;~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~\\n&quot;) ## ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~ res &lt;- lm(mean_tree_depth ~ proportion_positives, data = data.frame( proportion_positives = proportion_positives, mean_tree_depth = log2(mean_tree_depth) ) ) summary(res) ## ## Call: ## lm(formula = mean_tree_depth ~ proportion_positives, data = data.frame(proportion_positives = proportion_positives, ## mean_tree_depth = log2(mean_tree_depth))) ## ## Residuals: ## 1 2 3 4 5 6 7 ## 0.058792 -0.267279 -0.329568 0.140857 -0.004416 -0.344751 0.746365 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1.772 0.341 5.197 0.00348 ** ## proportion_positives 94.203 34.650 2.719 0.04184 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.4194 on 5 degrees of freedom ## Multiple R-squared: 0.5965, Adjusted R-squared: 0.5158 ## F-statistic: 7.391 on 1 and 5 DF, p-value: 0.04184 cat(&quot;~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~\\n&quot;) ## ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~ cat(&quot;Logit transform for proportion positives\\n&quot;) ## Logit transform for proportion positives cat(&quot;~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~\\n&quot;) ## ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~ res &lt;- lm(mean_tree_depth ~ proportion_positives, data = data.frame( proportion_positives = logit(proportion_positives), mean_tree_depth = mean_tree_depth ) ) summary(res) ## ## Call: ## lm(formula = mean_tree_depth ~ proportion_positives, data = data.frame(proportion_positives = logit(proportion_positives), ## mean_tree_depth = mean_tree_depth)) ## ## Residuals: ## 1 2 3 4 5 6 7 ## -0.6182 -0.7549 -1.0271 -0.0954 -0.1369 -0.2818 2.9143 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 22.7794 4.8653 4.682 0.00542 ** ## proportion_positives 3.3428 0.9906 3.375 0.01979 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.457 on 5 degrees of freedom ## Multiple R-squared: 0.6949, Adjusted R-squared: 0.6339 ## F-statistic: 11.39 on 1 and 5 DF, p-value: 0.01979 cat(&quot;~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~\\n&quot;) ## ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~ cat(&quot;Arc-sine transform for proportion positives\\n&quot;) ## Arc-sine transform for proportion positives cat(&quot;~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~\\n&quot;) ## ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~ res &lt;- lm(mean_tree_depth ~ proportion_positives, data = data.frame( proportion_positives = asin(sqrt(proportion_positives)), mean_tree_depth = mean_tree_depth ) ) summary(res) ## ## Call: ## lm(formula = mean_tree_depth ~ proportion_positives, data = data.frame(proportion_positives = asin(sqrt(proportion_positives)), ## mean_tree_depth = mean_tree_depth)) ## ## Residuals: ## 1 2 3 4 5 6 7 ## -0.37586 -0.90400 -1.11266 0.04187 -0.08305 -0.72069 3.15439 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -0.06706 2.29355 -0.029 0.9778 ## proportion_positives 72.39644 24.52407 2.952 0.0318 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.592 on 5 degrees of freedom ## Multiple R-squared: 0.6354, Adjusted R-squared: 0.5625 ## F-statistic: 8.715 on 1 and 5 DF, p-value: 0.03181 cat(&quot;~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~\\n&quot;) ## ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~ cat(&quot;Logit transform for proportion positives &amp; log transform for tree depth \\n&quot;) ## Logit transform for proportion positives &amp; log transform for tree depth cat(&quot;~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~\\n&quot;) ## ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~ res &lt;- lm(mean_tree_depth ~ proportion_positives, data = data.frame( proportion_positives = logit(proportion_positives), mean_tree_depth = log2(mean_tree_depth) ) ) summary(res) ## ## Call: ## lm(formula = mean_tree_depth ~ proportion_positives, data = data.frame(proportion_positives = logit(proportion_positives), ## mean_tree_depth = log2(mean_tree_depth))) ## ## Residuals: ## 1 2 3 4 5 6 7 ## -0.06899 -0.21823 -0.26484 0.09247 -0.05659 -0.11887 0.63505 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 6.8270 1.1096 6.153 0.00165 ** ## proportion_positives 0.8676 0.2259 3.840 0.01212 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.3322 on 5 degrees of freedom ## Multiple R-squared: 0.7468, Adjusted R-squared: 0.6962 ## F-statistic: 14.75 on 1 and 5 DF, p-value: 0.01212 cat(&quot;~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~\\n&quot;) ## ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~ cat(&quot;Arc-sine transform for proportion positives &amp; log transform for tree depth\\n&quot;) ## Arc-sine transform for proportion positives &amp; log transform for tree depth cat(&quot;~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~\\n&quot;) ## ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~ res &lt;- lm(mean_tree_depth ~ proportion_positives, data = data.frame( proportion_positives = asin(sqrt(proportion_positives)), mean_tree_depth = log2(mean_tree_depth) ) ) summary(res) ## ## Call: ## lm(formula = mean_tree_depth ~ proportion_positives, data = data.frame(proportion_positives = asin(sqrt(proportion_positives)), ## mean_tree_depth = log2(mean_tree_depth))) ## ## Residuals: ## 1 2 3 4 5 6 7 ## -0.00527 -0.25295 -0.28949 0.12670 -0.03982 -0.23622 0.69705 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.9066 0.5417 1.673 0.1551 ## proportion_positives 18.6878 5.7926 3.226 0.0233 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.3761 on 5 degrees of freedom ## Multiple R-squared: 0.6755, Adjusted R-squared: 0.6106 ## F-statistic: 10.41 on 1 and 5 DF, p-value: 0.02331 data &lt;- data.frame( proportion_positives = logit(proportion_positives), mean_tree_depth = log2(mean_tree_depth), upper_error_tree_depth = log2(mean_tree_depth + sd_tree_depth), lower_error_tree_depth = log2(mean_tree_depth - sd_tree_depth) ) data$model &lt;- c( &quot;italic(P.~falciparum)~model&quot;, &quot;italic(P.~falciparum)~with~heterologous~positives~model&quot;, &quot;italic(P.~falciparum)~with~heterologous~unlabeled~model&quot;, &quot;italic(P.~vivax)~model&quot;, &quot;italic(P.~vivax)~with~heterologous~positives~model&quot;, &quot;italic(P.~vivax)~with~heterologous~unlabeled~model&quot;, &quot;Combined~model&quot; ) lm_eqn &lt;- function(data) { m &lt;- lm(mean_tree_depth ~ proportion_positives, data) eq &lt;- substitute( log[2](italic(y)) == a + b %.% logit(italic(x)) * &quot;,&quot; ~ ~ italic(r^2) ~ &quot;=&quot; ~ r2, list( a = format(unname(coef(m)[1]), digits = 2), b = format(unname(coef(m)[2]), digits = 2), r2 = format(summary(m)$adj.r.squared, digits = 2) ) ) as.character(as.expression(eq)) } p &lt;- ggplot(data, aes(proportion_positives, mean_tree_depth)) + geom_smooth(method = &quot;lm&quot;, formula = y ~ x, se = FALSE, color = &quot;grey50&quot;, linetype = &quot;dashed&quot;, linewidth = 0.5) + geom_point(color = &quot;grey10&quot;, size = 1.5, alpha = 0.8) + geom_errorbar(aes(ymin = lower_error_tree_depth, ymax = upper_error_tree_depth), width = 0.05, linewidth = 0.2) + geom_text_repel(aes(label = model), size = 2.5, parse = TRUE, segment.size = 0.2, nudge_x = 0.02, nudge_y = -0.15, point.padding = 0.1 ) + geom_text(x = -5.5, y = 3.5, label = lm_eqn(data), parse = TRUE, size = 3) + scale_x_continuous( breaks = logit(c(0.004, 0.008, 0.012, 0.016)), labels = c(0.004, 0.008, 0.012, 0.016) ) + scale_y_continuous(breaks = log2(c(0.25, 0.5, 2, 4, 8)), labels = c(0.25, 0.5, 2, 4, 8)) + theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.title = element_text(hjust = 0.5, colour = &quot;black&quot;), plot.margin = ggplot2::margin(5, 5, 5, 5, &quot;pt&quot;), axis.title = element_text(colour = &quot;black&quot;), axis.text = element_text(colour = &quot;black&quot;) ) + xlab(&quot;Proportion of positives&quot;) + ylab(&quot;Mean tree depth&quot;) png(file = &quot;./figures/Supplementary Fig 7.png&quot;, width = 3800, height = 3500, res = 600) print(p) dev.off() pdf(file = &quot;../supplementary_figures/Supplementary Fig 7.pdf&quot;, width = 7.6, height = 7) print(p) dev.off() sessionInfo() ## R version 4.2.3 (2023-03-15) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Big Sur ... 10.16 ## ## Matrix products: default ## BLAS: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] ggrepel_0.9.3 psych_2.3.3 reticulate_1.28 DT_0.27 ## [5] rcompanion_2.4.30 rlist_0.4.6.2 scales_1.2.1 ggsci_3.0.0 ## [9] pracma_2.4.2 cowplot_1.1.1 gghalves_0.1.4 ggdist_3.2.1 ## [13] reshape2_1.4.4 ggplot2_3.4.2 ## ## loaded via a namespace (and not attached): ## [1] nlme_3.1-162 matrixStats_0.63.0 httr_1.4.6 ## [4] rprojroot_2.0.3 R.cache_0.16.0 tools_4.2.3 ## [7] bslib_0.4.2 utf8_1.2.3 R6_2.5.1 ## [10] nortest_1.0-4 colorspace_2.1-0 withr_2.5.0 ## [13] mnormt_2.1.1 tidyselect_1.2.0 Exact_3.2 ## [16] compiler_4.2.3 cli_3.6.1 expm_0.999-7 ## [19] sandwich_3.0-2 bookdown_0.34 sass_0.4.6 ## [22] lmtest_0.9-40 mvtnorm_1.1-3 proxy_0.4-27 ## [25] multcompView_0.1-9 stringr_1.5.0 digest_0.6.31 ## [28] rmarkdown_2.21 R.utils_2.12.2 pkgconfig_2.0.3 ## [31] htmltools_0.5.5 styler_1.9.1 fastmap_1.1.1 ## [34] highr_0.10 htmlwidgets_1.6.2 rlang_1.1.1 ## [37] readxl_1.4.2 rstudioapi_0.14 jquerylib_0.1.4 ## [40] farver_2.1.1 generics_0.1.3 zoo_1.8-12 ## [43] jsonlite_1.8.4 crosstalk_1.2.0 dplyr_1.1.2 ## [46] R.oo_1.25.0 distributional_0.3.2 magrittr_2.0.3 ## [49] modeltools_0.2-23 Matrix_1.5-4 Rcpp_1.0.10 ## [52] DescTools_0.99.48 munsell_0.5.0 fansi_1.0.4 ## [55] lifecycle_1.0.3 R.methodsS3_1.8.2 stringi_1.7.12 ## [58] multcomp_1.4-23 yaml_2.3.7 MASS_7.3-60 ## [61] rootSolve_1.8.2.3 plyr_1.8.8 grid_4.2.3 ## [64] parallel_4.2.3 lmom_2.9 lattice_0.21-8 ## [67] splines_4.2.3 knitr_1.42 pillar_1.9.0 ## [70] boot_1.3-28.1 gld_2.6.6 codetools_0.2-19 ## [73] stats4_4.2.3 glue_1.6.2 evaluate_0.21 ## [76] data.table_1.14.8 vctrs_0.6.2 png_0.1-8 ## [79] cellranger_1.1.0 gtable_0.3.3 purrr_1.0.1 ## [82] cachem_1.0.8 xfun_0.39 coin_1.4-2 ## [85] libcoin_1.0-9 e1071_1.7-13 class_7.3-22 ## [88] survival_3.5-5 tibble_3.2.1 TH.data_1.1-2 ## [91] ellipsis_0.3.2 here_1.0.1 session_info.show() ## ----- ## numpy 1.19.0 ## pandas 1.3.2 ## purf NA ## session_info 1.0.0 ## ----- ## Python 3.8.2 (default, Mar 26 2020, 10:45:18) [Clang 4.0.1 (tags/RELEASE_401/final)] ## macOS-10.16-x86_64-i386-64bit ## ----- ## Session information updated at 2023-05-18 12:35 "],["id_05_model_interpretation.html", "Section 5 Model interpretation 5.1 Proximity matrix calculation 5.2 Clustering of predicted positives 5.3 Comparison of amino acid frequencies between species 5.4 Variable importance", " Section 5 Model interpretation 5.1 Proximity matrix calculation 5.1.1 Analysis In Python: library(reticulate) use_condaenv(&quot;/Users/renee/Library/r-miniconda/envs/purf/bin/python&quot;) import pandas as pd import numpy as np import pickle from purf.pu_ensemble import PURandomForestClassifier from sklearn.impute import SimpleImputer from sklearn.ensemble._forest import _generate_unsampled_indices import multiprocessing from joblib import Parallel, delayed num_cores = multiprocessing.cpu_count() import session_info 5.1.1.1 Pv data set data = pd.read_csv(&#39;./other_data/pv_ml_input.csv&#39;, index_col=0) features = data.iloc[:, 1:] outcome = np.array(data.antigen_label) # Imputation imputer = SimpleImputer(strategy=&#39;median&#39;) X = imputer.fit_transform(features) # Load model model_tree_filtered = pickle.load(open(&#39;./pickle_data/pv_0.5_purf_tree_filtering.pkl&#39;, &#39;rb&#39;)) model = model_tree_filtered[&#39;model&#39;] weights = model_tree_filtered[&#39;weights&#39;] def calculate_proximity_(trees, y, leaf_indices): same_leaf_mat = np.zeros([y.shape[0], y.shape[0]]) same_oob_mat = np.zeros([y.shape[0], y.shape[0]]) for idx, tree in enumerate(trees): oob_indices = _generate_unsampled_indices(tree.random_state, y.shape[0], y.shape[0]) for i in oob_indices: for j in oob_indices: same_oob_mat[i, j] += 1 if leaf_indices[i, idx] == leaf_indices[j, idx]: same_leaf_mat[i, j] += 1 return (same_leaf_mat, same_oob_mat) trees = model.estimators_ leaf_indices = model.apply(X) idx_list = [i for i in range(len(trees)) if weights[i] == 1] idx_list = np.array_split(idx_list, 1000) res = Parallel(n_jobs=num_cores)( delayed(calculate_proximity_)(list(trees[i] for i in idx), outcome, leaf_indices[:, idx]) for idx in idx_list) same_leaf_mat = sum([r[0] for r in res]) same_oob_mat = sum([r[1] for r in res]) prox_mat = pd.DataFrame(np.divide(same_leaf_mat, same_oob_mat, out=np.zeros_like(same_leaf_mat), where=same_oob_mat!=0)) prox_mat.index = features.index prox_mat.columns = features.index prox_mat.to_csv(&#39;~/Downloads/pv_proximity_values.csv&#39;, index=False) 5.1.1.2 Pv + Pf combined data set data = pd.read_csv(&#39;./data/supplementary_data_4_pfpv_ml_input.csv&#39;, index_col=0) features = data.iloc[:, 1:] outcome = np.array(data.antigen_label) # Imputation imputer = SimpleImputer(strategy=&#39;median&#39;) X = imputer.fit_transform(features) # Load model model_tree_filtered = pickle.load(open(&#39;./pickle_data/pfpv_0.5_purf_tree_filtering.pkl&#39;, &#39;rb&#39;)) model = model_tree_filtered[&#39;model&#39;] weights = model_tree_filtered[&#39;weights&#39;] def calculate_proximity_(trees, y, leaf_indices): same_leaf_mat = np.zeros([y.shape[0], y.shape[0]]) same_oob_mat = np.zeros([y.shape[0], y.shape[0]]) for idx, tree in enumerate(trees): oob_indices = _generate_unsampled_indices(tree.random_state, y.shape[0], y.shape[0]) for i in oob_indices: for j in oob_indices: same_oob_mat[i, j] += 1 if leaf_indices[i, idx] == leaf_indices[j, idx]: same_leaf_mat[i, j] += 1 return (same_leaf_mat, same_oob_mat) trees = model.estimators_ leaf_indices = model.apply(X) idx_list = [i for i in range(len(trees)) if weights[i] == 1] idx_list = np.array_split(idx_list, 1000) res = Parallel(n_jobs=num_cores)( delayed(calculate_proximity_)(list(trees[i] for i in idx), outcome, leaf_indices[:, idx]) for idx in idx_list) same_leaf_mat = sum([r[0] for r in res]) same_oob_mat = sum([r[1] for r in res]) prox_mat = pd.DataFrame(np.divide(same_leaf_mat, same_oob_mat, out=np.zeros_like(same_leaf_mat), where=same_oob_mat!=0)) prox_mat.index = features.index prox_mat.columns = features.index prox_mat.to_csv(&#39;~/Downloads/pfpv_proximity_values.csv&#39;, index=False) In R: # Multidimensional scaling prox_mat &lt;- read.csv(&quot;~/Downloads/pv_proximity_values.csv&quot;, check.names = FALSE) mds &lt;- cmdscale(as.dist(1 - prox_mat), k = ncol(prox_mat) - 1, eig = TRUE) var_explained &lt;- round(mds$eig * 100 / sum(mds$eig), 2) print(paste0(&quot;Dimension 1 (&quot;, var_explained[1], &quot;%)&quot;)) # 41.44% print(paste0(&quot;Dimension 2 (&quot;, var_explained[2], &quot;%)&quot;)) # 8.64% print(paste0(&quot;Dimension 3 (&quot;, var_explained[3], &quot;%)&quot;)) # 4.72% mds &lt;- as.data.frame(mds$points) write.csv(mds, &quot;~/Downloads/mds_pv_proximity_values.csv&quot;) prox_mat &lt;- read.csv(&quot;~/Downloads/pfpv_proximity_values.csv&quot;, check.names = FALSE) mds &lt;- cmdscale(as.dist(1 - prox_mat), k = ncol(prox_mat) - 1, eig = TRUE) var_explained &lt;- round(mds$eig * 100 / sum(mds$eig), 2) print(paste0(&quot;Dimension 1 (&quot;, var_explained[1], &quot;%)&quot;)) # 37.91% print(paste0(&quot;Dimension 2 (&quot;, var_explained[2], &quot;%)&quot;)) # 7.88% print(paste0(&quot;Dimension 3 (&quot;, var_explained[3], &quot;%)&quot;)) # 4.79% mds &lt;- as.data.frame(mds$points) write.csv(mds, &quot;~/Downloads/mds_pfpv_proximity_values.csv&quot;) 5.1.2 Plotting In R: library(umap) library(ggplot2) library(ggrepel) library(cowplot) 5.1.2.1 Pv + Pf combined data set data &lt;- read.csv(&quot;~/Downloads/mds_pfpv_proximity_values.csv&quot;, row.names = 1, check.names = FALSE) set.seed(22) umap_res &lt;- umap(data) umap_df &lt;- data.frame(umap_res$layout) save(umap_df, file = &quot;./rdata/pfpv_prox_mds_umap.RData&quot;) data &lt;- read.csv(&quot;./data/supplementary_data_5_pfpv_purf_oob_predictions.csv&quot;, row.names = 1, check.names = FALSE)[5394:11884, ] load(&quot;./rdata/pfpv_prox_mds_umap.RData&quot;) umap_df_ &lt;- umap_df[1:5393, ] umap_df &lt;- umap_df[5394:11884, ] umap_df$label &lt;- data$antigen_label umap_df$score &lt;- data$`OOB score filtered` umap_df_text &lt;- umap_df[umap_df$label == 1, ] umap_df_text$label_text &lt;- &quot;&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PVP01_0835600.1-p1&quot;] &lt;- &quot;CSP&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PVP01_0623800.1-p1&quot;] &lt;- &quot;DBP&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PVP01_0728900.1-p1&quot;] &lt;- &quot;MSP1&quot; umap_p1 &lt;- ggplot() + geom_point(data = umap_df_, aes(x = X1, y = X2), color = &quot;grey90&quot;, alpha = 0.5) + geom_point(data = umap_df[umap_df$label == 0, ], aes(x = X1, y = X2, color = score), alpha = 0.5) + geom_point( data = umap_df[umap_df$label == 1, ], aes(x = X1, y = X2, shape = factor(21)), color = &quot;black&quot;, fill = &quot;#FCB40A&quot;, stroke = 0.3, size = 2, alpha = 0.9 ) + geom_text_repel( data = umap_df_text, aes(x = X1, y = X2, label = label_text), size = 3.5, nudge_x = 1, nudge_y = -1, point.padding = 0.1 ) + scale_color_gradient2(low = &quot;#3399FF&quot;, mid = &quot;white&quot;, high = &quot;#FF3399&quot;, midpoint = 0.5, limits = c(0, 1)) + scale_shape_manual(values = c(21), labels = c(&quot;Known antigens&quot;)) + theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.margin = ggplot2::margin(5, 5, 5, 5, &quot;pt&quot;), axis.title = element_text(colour = &quot;black&quot;), axis.text = element_text(colour = &quot;black&quot;), legend.position = &quot;none&quot; ) + xlab(&quot;Dimension 1&quot;) + ylab(&quot;Dimension 2&quot;) data &lt;- read.csv(&quot;./data/supplementary_data_5_pfpv_purf_oob_predictions.csv&quot;, row.names = 1, check.names = FALSE)[1:5393, ] load(&quot;./rdata/pfpv_prox_mds_umap.RData&quot;) umap_df_ &lt;- umap_df[5394:11884, ] umap_df &lt;- umap_df[1:5393, ] umap_df$label &lt;- data$antigen_label umap_df$score &lt;- data$`OOB score filtered` umap_df_text &lt;- umap_df[umap_df$label == 1, ] umap_df_text$label_text &lt;- &quot;&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PF3D7_0304600.1-p1&quot;] &lt;- &quot;CSP&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PF3D7_0424100.1-p1&quot;] &lt;- &quot;RH5&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PF3D7_0206900.1-p1&quot;] &lt;- &quot;MSP5&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PF3D7_0209000.1-p1&quot;] &lt;- &quot;P230&quot; umap_p2 &lt;- ggplot() + geom_point(data = umap_df_, aes(x = X1, y = X2), color = &quot;grey90&quot;, alpha = 0.5) + geom_point(data = umap_df[umap_df$label == 0, ], aes(x = X1, y = X2, color = score), alpha = 0.5) + geom_point( data = umap_df[umap_df$label == 1, ], aes(x = X1, y = X2), shape = 21, color = &quot;black&quot;, fill = &quot;#FCB40A&quot;, stroke = 0.3, size = 2, alpha = 0.9 ) + geom_text_repel( data = umap_df_text, aes(x = X1, y = X2, label = label_text), size = 3.5, nudge_x = 1.5, nudge_y = -1, point.padding = 0.1 ) + scale_color_gradient2(low = &quot;#3399FF&quot;, mid = &quot;white&quot;, high = &quot;#FF3399&quot;, midpoint = 0.5, limits = c(0, 1)) + theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.margin = ggplot2::margin(5, 5, 5, 5, &quot;pt&quot;), axis.title = element_text(colour = &quot;black&quot;), axis.text = element_text(colour = &quot;black&quot;), legend.position = &quot;none&quot; ) + xlab(&quot;Dimension 1&quot;) + ylab(&quot;Dimension 2&quot;) legend &lt;- get_legend(umap_p2 + theme( legend.direction = &quot;horizontal&quot;, legend.position = &quot;bottom&quot;, legend.title = element_text(vjust = 0.8, colour = &quot;black&quot;) ) + guides( color = guide_colorbar(title = &quot;Score&quot;), shape = guide_legend(title = &quot;&quot;) )) umap_p_combined &lt;- plot_grid(umap_p1, umap_p2, plot_grid(NULL, legend, rel_widths = c(0.15, 0.85)), ncol = 2, rel_heights = c(1, 0.2), labels = c(&quot;a&quot;, &quot;b&quot;, &quot;&quot;, &quot;&quot;) ) umap_p_combined png(file = &quot;./figures/Fig 3.png&quot;, width = 6000, height = 3500, res = 600) print(umap_p_combined) dev.off() pdf(file = &quot;../figures/Fig 3.pdf&quot;, width = 12, height = 7) print(umap_p_combined) dev.off() 5.2 Clustering of predicted positives 5.2.1 Analysis In R: library(DT) library(factoextra) library(NbClust) library(cluster) library(dendextend) library(umap) library(ggplot2) library(ggrepel) library(cowplot) library(scales) library(rcompanion) scientific &lt;- function(x) { ifelse(x == 0, &quot;0&quot;, gsub(&quot;e&quot;, &quot; * 10^&quot;, scientific_format(digits = 3)(x))) } calculate_association &lt;- function(clusters) { species &lt;- sapply(names(clusters), function(x) if (startsWith(x, &quot;PF3D7&quot;)) &quot;pf&quot; else &quot;pv&quot;) M &lt;- table(clusters, species) Xsq &lt;- chisq.test(M, correct = FALSE) cramerV &lt;- cramerV(M, ci = TRUE) return(list( M = M, xsq_pval = scientific(as.numeric(Xsq$p.value)), cramerV = sprintf(&quot;%0.2f&quot;, cramerV) )) } pfpv_data &lt;- read.csv(&quot;./data/supplementary_data_5_pfpv_purf_oob_predictions.csv&quot;, row.names = 1, check.names = FALSE) pred_pos &lt;- rownames(pfpv_data)[pfpv_data$`OOB score filtered` &gt;= 0.5] pfpv_prox &lt;- read.csv(&quot;~/Downloads/pfpv_proximity_values.csv&quot;, check.names = FALSE) pred_pos_dist &lt;- 1 - pfpv_prox rownames(pred_pos_dist) &lt;- colnames(pred_pos_dist) pred_pos_dist &lt;- pred_pos_dist[rownames(pred_pos_dist) %in% pred_pos, colnames(pred_pos_dist) %in% pred_pos] pred_pos_hc &lt;- hclust(as.dist(pred_pos_dist), method = &quot;ward.D2&quot;) save(pred_pos_hc, file = &quot;./rdata/pred_pos_clusters.RData&quot;) load(file = &quot;./rdata/pred_pos_clusters.RData&quot;) clusters &lt;- cutree(pred_pos_hc, k = 2) calculate_association(clusters) ## $M ## species ## clusters pf pv ## 1 1695 1918 ## 2 979 759 ## ## $xsq_pval ## [1] &quot;1.11 * 10^-10&quot; ## ## $cramerV ## [1] &quot;0.09&quot; &quot;0.06&quot; &quot;0.11&quot; data &lt;- read.csv(&quot;./data/supplementary_data_5_pfpv_purf_oob_predictions.csv&quot;, row.names = 1, check.names = FALSE) load(&quot;./rdata/pfpv_prox_mds_umap.RData&quot;) umap_df$label &lt;- data$antigen_label umap_df_ &lt;- umap_df[!rownames(umap_df) %in% names(clusters), ] umap_df &lt;- rbind(umap_df[umap_df$label == 1, ], umap_df[rownames(umap_df) %in% names(clusters), ]) umap_df$group &lt;- &quot;&quot; umap_df$group[umap_df$label == 1] &lt;- &quot;Known antigen&quot; umap_df$group[rownames(umap_df) %in% c(&quot;PF3D7_0304600.1-p1&quot;, &quot;PF3D7_0424100.1-p1&quot;, &quot;PF3D7_0206900.1-p1&quot;, &quot;PF3D7_0209000.1-p1&quot;, &quot;PVP01_0835600.1-p1&quot;, &quot;PVP01_0623800.1-p1&quot;, &quot;PVP01_0728900.1-p1&quot;)] &lt;- &quot;Reference antigen&quot; umap_df$group[rownames(umap_df) %in% names(clusters)[clusters == 1]] &lt;- &quot;Group 1&quot; umap_df$group[rownames(umap_df) %in% names(clusters)[clusters == 2]] &lt;- &quot;Group 2&quot; umap_df_text &lt;- umap_df[umap_df$label == 1, ] umap_df_text$label_text &lt;- &quot;&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PF3D7_0304600.1-p1&quot;] &lt;- &quot;PfCSP&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PF3D7_0424100.1-p1&quot;] &lt;- &quot;RH5&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PF3D7_0206900.1-p1&quot;] &lt;- &quot;MSP5&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PF3D7_0209000.1-p1&quot;] &lt;- &quot;P230&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PVP01_0835600.1-p1&quot;] &lt;- &quot;PvCSP&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PVP01_0623800.1-p1&quot;] &lt;- &quot;DBP&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PVP01_0728900.1-p1&quot;] &lt;- &quot;MSP1&quot; umap_p1 &lt;- ggplot() + geom_point(data = umap_df_, aes(x = X1, y = X2), color = &quot;grey90&quot;, alpha = 0.5) + geom_point(data = umap_df[umap_df$label == 0, ], aes(x = X1, y = X2, fill = group), shape = 21, alpha = 0.5) + scale_fill_manual( breaks = c(&quot;Group 1&quot;, &quot;Group 2&quot;), values = c(&quot;#A552FD&quot;, &quot;#FD529B&quot;), labels = c(&quot;Predicted antigen (Group 1)&quot;, &quot;Predicted antigen (Group 2)&quot;) ) + geom_point( data = umap_df[umap_df$label == 1, ], aes(x = X1, y = X2), shape = 21, color = &quot;black&quot;, fill = &quot;#FFFF33&quot;, stroke = 0.3, size = 2, alpha = 0.5 ) + geom_text_repel( data = umap_df_text, aes(x = X1, y = X2, label = label_text), size = 3.5, nudge_x = 1.5, nudge_y = -1, point.padding = 0.1 ) + theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.margin = ggplot2::margin(5, 5, 5, 5, &quot;pt&quot;), axis.title = element_text(colour = &quot;black&quot;), axis.text = element_text(colour = &quot;black&quot;), legend.position = &quot;bottom&quot; ) + guides(fill = guide_legend(title = &quot;&quot;)) + xlab(&quot;Dimension 1&quot;) + ylab(&quot;Dimension 2&quot;) load(file = &quot;./rdata/pred_pos_clusters.RData&quot;) pred_pos_hc_list &lt;- get_subdendrograms(as.dendrogram(pred_pos_hc), 2) pred_pos_hc_list_2 &lt;- get_subdendrograms(as.dendrogram(pred_pos_hc_list[[1]]), 2) clusters &lt;- c( rep(1, nleaves(pred_pos_hc_list_2[[1]])), rep(2, nleaves(pred_pos_hc_list_2[[2]])) ) names(clusters) &lt;- c(labels(pred_pos_hc_list_2[[1]]), labels(pred_pos_hc_list_2[[2]])) save(pred_pos_hc, pred_pos_hc_list, pred_pos_hc_list_2, file = &quot;./rdata/pred_pos_clusters.RData&quot; ) load(file = &quot;./rdata/pred_pos_clusters.RData&quot;) clusters &lt;- c( rep(1, nleaves(pred_pos_hc_list_2[[1]])), rep(2, nleaves(pred_pos_hc_list_2[[2]])) ) names(clusters) &lt;- c(labels(pred_pos_hc_list_2[[1]]), labels(pred_pos_hc_list_2[[2]])) calculate_association(clusters) ## $M ## species ## clusters pf pv ## 1 147 519 ## 2 1548 1399 ## ## $xsq_pval ## [1] &quot;6.5 * 10^-46&quot; ## ## $cramerV ## [1] &quot;0.24&quot; &quot;0.21&quot; &quot;0.27&quot; data &lt;- read.csv(&quot;./data/supplementary_data_5_pfpv_purf_oob_predictions.csv&quot;, row.names = 1, check.names = FALSE) load(&quot;./rdata/pfpv_prox_mds_umap.RData&quot;) umap_df$label &lt;- data$antigen_label umap_df_ &lt;- umap_df[!rownames(umap_df) %in% names(clusters), ] umap_df &lt;- rbind(umap_df[umap_df$label == 1, ], umap_df[rownames(umap_df) %in% names(clusters), ]) umap_df$group &lt;- &quot;&quot; umap_df$group[umap_df$label == 1] &lt;- &quot;Known antigen&quot; umap_df$group[rownames(umap_df) %in% c(&quot;PF3D7_0304600.1-p1&quot;, &quot;PF3D7_0424100.1-p1&quot;, &quot;PF3D7_0206900.1-p1&quot;, &quot;PF3D7_0209000.1-p1&quot;, &quot;PVP01_0835600.1-p1&quot;, &quot;PVP01_0623800.1-p1&quot;, &quot;PVP01_0728900.1-p1&quot;)] &lt;- &quot;Reference antigen&quot; umap_df$group[rownames(umap_df) %in% names(clusters)[clusters == 1]] &lt;- &quot;Group 1&quot; umap_df$group[rownames(umap_df) %in% names(clusters)[clusters == 2]] &lt;- &quot;Group 2&quot; umap_df_text &lt;- umap_df[umap_df$label == 1, ] umap_df_text$label_text &lt;- &quot;&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PF3D7_0304600.1-p1&quot;] &lt;- &quot;PfCSP&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PF3D7_0424100.1-p1&quot;] &lt;- &quot;RH5&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PF3D7_0206900.1-p1&quot;] &lt;- &quot;MSP5&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PF3D7_0209000.1-p1&quot;] &lt;- &quot;P230&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PVP01_0835600.1-p1&quot;] &lt;- &quot;PvCSP&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PVP01_0623800.1-p1&quot;] &lt;- &quot;DBP&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PVP01_0728900.1-p1&quot;] &lt;- &quot;MSP1&quot; umap_p2 &lt;- ggplot() + geom_point(data = umap_df_, aes(x = X1, y = X2), color = &quot;grey90&quot;, alpha = 0.5) + geom_point(data = umap_df[umap_df$label == 0, ], aes(x = X1, y = X2, fill = group), shape = 21, alpha = 0.5) + scale_fill_manual( breaks = c(&quot;Group 1&quot;, &quot;Group 2&quot;), values = c(&quot;#A552FD&quot;, &quot;#53F4EF&quot;), labels = c(&quot;Predicted antigen (Group 1)&quot;, &quot;Predicted antigen (Group 2)&quot;) ) + geom_point( data = umap_df[umap_df$label == 1, ], aes(x = X1, y = X2), shape = 21, color = &quot;black&quot;, fill = &quot;#FFFF33&quot;, stroke = 0.3, size = 2, alpha = 0.5 ) + geom_text_repel( data = umap_df_text, aes(x = X1, y = X2, label = label_text), size = 3.5, nudge_x = 1.5, nudge_y = -1, point.padding = 0.1 ) + theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.margin = ggplot2::margin(5, 5, 5, 5, &quot;pt&quot;), axis.title = element_text(colour = &quot;black&quot;), axis.text = element_text(colour = &quot;black&quot;), legend.position = &quot;bottom&quot; ) + guides(fill = guide_legend(title = &quot;&quot;)) + xlab(&quot;Dimension 1&quot;) + ylab(&quot;Dimension 2&quot;) load(file = &quot;./rdata/pred_pos_clusters.RData&quot;) pred_pos_hc_list_3 &lt;- get_subdendrograms(as.dendrogram(pred_pos_hc_list_2[[2]]), 2) clusters &lt;- c( rep(1, nleaves(pred_pos_hc_list_3[[1]])), rep(2, nleaves(pred_pos_hc_list_3[[2]])) ) names(clusters) &lt;- c(labels(pred_pos_hc_list_3[[1]]), labels(pred_pos_hc_list_3[[2]])) save(pred_pos_hc, pred_pos_hc_list, pred_pos_hc_list_2, pred_pos_hc_list_3, file = &quot;./rdata/pred_pos_clusters.RData&quot; ) load(file = &quot;./rdata/pred_pos_clusters.RData&quot;) clusters &lt;- c( rep(1, nleaves(pred_pos_hc_list_3[[1]])), rep(2, nleaves(pred_pos_hc_list_3[[2]])) ) names(clusters) &lt;- c(labels(pred_pos_hc_list_3[[1]]), labels(pred_pos_hc_list_3[[2]])) calculate_association(clusters) ## $M ## species ## clusters pf pv ## 1 1505 40 ## 2 43 1359 ## ## $xsq_pval ## [1] &quot;0&quot; ## ## $cramerV ## [1] &quot;0.94&quot; &quot;0.93&quot; &quot;0.95&quot; data &lt;- read.csv(&quot;./data/supplementary_data_5_pfpv_purf_oob_predictions.csv&quot;, row.names = 1, check.names = FALSE) load(&quot;./rdata/pfpv_prox_mds_umap.RData&quot;) umap_df$label &lt;- data$antigen_label umap_df_ &lt;- umap_df[!rownames(umap_df) %in% names(clusters), ] umap_df &lt;- rbind(umap_df[umap_df$label == 1, ], umap_df[rownames(umap_df) %in% names(clusters), ]) umap_df$group &lt;- &quot;&quot; umap_df$group[umap_df$label == 1] &lt;- &quot;Known antigen&quot; umap_df$group[rownames(umap_df) %in% c(&quot;PF3D7_0304600.1-p1&quot;, &quot;PF3D7_0424100.1-p1&quot;, &quot;PF3D7_0206900.1-p1&quot;, &quot;PF3D7_0209000.1-p1&quot;, &quot;PVP01_0835600.1-p1&quot;, &quot;PVP01_0623800.1-p1&quot;, &quot;PVP01_0728900.1-p1&quot;)] &lt;- &quot;Reference antigen&quot; umap_df$group[rownames(umap_df) %in% names(clusters)[clusters == 1]] &lt;- &quot;Group 1&quot; umap_df$group[rownames(umap_df) %in% names(clusters)[clusters == 2]] &lt;- &quot;Group 2&quot; umap_df_text &lt;- umap_df[umap_df$label == 1, ] umap_df_text$label_text &lt;- &quot;&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PF3D7_0304600.1-p1&quot;] &lt;- &quot;PfCSP&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PF3D7_0424100.1-p1&quot;] &lt;- &quot;RH5&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PF3D7_0206900.1-p1&quot;] &lt;- &quot;MSP5&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PF3D7_0209000.1-p1&quot;] &lt;- &quot;P230&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PVP01_0835600.1-p1&quot;] &lt;- &quot;PvCSP&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PVP01_0623800.1-p1&quot;] &lt;- &quot;DBP&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PVP01_0728900.1-p1&quot;] &lt;- &quot;MSP1&quot; umap_p3 &lt;- ggplot() + geom_point(data = umap_df_, aes(x = X1, y = X2), color = &quot;grey90&quot;, alpha = 0.5) + geom_point(data = umap_df[umap_df$label == 0, ], aes(x = X1, y = X2, fill = group), shape = 21, alpha = 0.5) + scale_fill_manual( breaks = c(&quot;Group 1&quot;, &quot;Group 2&quot;), values = c(&quot;#F49553&quot;, &quot;#53F4EF&quot;), labels = c(&quot;Predicted antigen (Group 1)&quot;, &quot;Predicted antigen (Group 2)&quot;) ) + geom_point( data = umap_df[umap_df$label == 1, ], aes(x = X1, y = X2), shape = 21, color = &quot;black&quot;, fill = &quot;#FFFF33&quot;, stroke = 0.3, size = 2, alpha = 0.5 ) + geom_text_repel( data = umap_df_text, aes(x = X1, y = X2, label = label_text), size = 3.5, nudge_x = 1.5, nudge_y = -1, point.padding = 0.1 ) + theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.margin = ggplot2::margin(5, 5, 5, 5, &quot;pt&quot;), axis.title = element_text(colour = &quot;black&quot;), axis.text = element_text(colour = &quot;black&quot;), legend.position = &quot;bottom&quot; ) + guides(fill = guide_legend(title = &quot;&quot;)) + xlab(&quot;Dimension 1&quot;) + ylab(&quot;Dimension 2&quot;) load(file = &quot;./rdata/pred_pos_clusters.RData&quot;) pred_pos_hc_list_4 &lt;- get_subdendrograms(as.dendrogram(pred_pos_hc_list_3[[1]]), 2) clusters &lt;- c( rep(1, nleaves(pred_pos_hc_list_4[[1]])), rep(2, nleaves(pred_pos_hc_list_4[[2]])) ) names(clusters) &lt;- c(labels(pred_pos_hc_list_4[[1]]), labels(pred_pos_hc_list_4[[2]])) save(pred_pos_hc, pred_pos_hc_list, pred_pos_hc_list_2, pred_pos_hc_list_3, pred_pos_hc_list_4, file = &quot;./rdata/pred_pos_clusters.RData&quot; ) load(file = &quot;./rdata/pred_pos_clusters.RData&quot;) clusters &lt;- c( rep(1, nleaves(pred_pos_hc_list_4[[1]])), rep(2, nleaves(pred_pos_hc_list_4[[2]])) ) names(clusters) &lt;- c(labels(pred_pos_hc_list_4[[1]]), labels(pred_pos_hc_list_4[[2]])) calculate_association(clusters) ## $M ## species ## clusters pf pv ## 1 563 18 ## 2 942 22 ## ## $xsq_pval ## [1] &quot;3.28 * 10^-01&quot; ## ## $cramerV ## [1] &quot;0.02&quot; &quot;0.00&quot; &quot;0.08&quot; data &lt;- read.csv(&quot;./data/supplementary_data_5_pfpv_purf_oob_predictions.csv&quot;, row.names = 1, check.names = FALSE) load(&quot;./rdata/pfpv_prox_mds_umap.RData&quot;) umap_df$label &lt;- data$antigen_label umap_df_ &lt;- umap_df[!rownames(umap_df) %in% names(clusters), ] umap_df &lt;- rbind(umap_df[umap_df$label == 1, ], umap_df[rownames(umap_df) %in% names(clusters), ]) umap_df$group &lt;- &quot;&quot; umap_df$group[umap_df$label == 1] &lt;- &quot;Known antigen&quot; umap_df$group[rownames(umap_df) %in% c(&quot;PF3D7_0304600.1-p1&quot;, &quot;PF3D7_0424100.1-p1&quot;, &quot;PF3D7_0206900.1-p1&quot;, &quot;PF3D7_0209000.1-p1&quot;, &quot;PVP01_0835600.1-p1&quot;, &quot;PVP01_0623800.1-p1&quot;, &quot;PVP01_0728900.1-p1&quot;)] &lt;- &quot;Reference antigen&quot; umap_df$group[rownames(umap_df) %in% names(clusters)[clusters == 1]] &lt;- &quot;Group 1&quot; umap_df$group[rownames(umap_df) %in% names(clusters)[clusters == 2]] &lt;- &quot;Group 2&quot; umap_df_text &lt;- umap_df[umap_df$label == 1, ] umap_df_text$label_text &lt;- &quot;&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PF3D7_0304600.1-p1&quot;] &lt;- &quot;PfCSP&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PF3D7_0424100.1-p1&quot;] &lt;- &quot;RH5&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PF3D7_0206900.1-p1&quot;] &lt;- &quot;MSP5&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PF3D7_0209000.1-p1&quot;] &lt;- &quot;P230&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PVP01_0835600.1-p1&quot;] &lt;- &quot;PvCSP&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PVP01_0623800.1-p1&quot;] &lt;- &quot;DBP&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PVP01_0728900.1-p1&quot;] &lt;- &quot;MSP1&quot; umap_p4 &lt;- ggplot() + geom_point(data = umap_df_, aes(x = X1, y = X2), color = &quot;grey90&quot;, alpha = 0.5) + geom_point(data = umap_df[umap_df$label == 0, ], aes(x = X1, y = X2, fill = group), shape = 21, alpha = 0.5) + scale_fill_manual( breaks = c(&quot;Group 1&quot;, &quot;Group 2&quot;), values = c(&quot;#F49553&quot;, &quot;#D953F4&quot;), labels = c(&quot;Predicted antigen (Group 1)&quot;, &quot;Predicted antigen (Group 2)&quot;) ) + geom_point( data = umap_df[umap_df$label == 1, ], aes(x = X1, y = X2), shape = 21, color = &quot;black&quot;, fill = &quot;#FFFF33&quot;, stroke = 0.3, size = 2, alpha = 0.5 ) + geom_text_repel( data = umap_df_text, aes(x = X1, y = X2, label = label_text), size = 3.5, nudge_x = 1.5, nudge_y = -1, point.padding = 0.1 ) + theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.margin = ggplot2::margin(5, 5, 5, 5, &quot;pt&quot;), axis.title = element_text(colour = &quot;black&quot;), axis.text = element_text(colour = &quot;black&quot;), legend.position = &quot;bottom&quot; ) + guides(fill = guide_legend(title = &quot;&quot;)) + xlab(&quot;Dimension 1&quot;) + ylab(&quot;Dimension 2&quot;) umap_p_combined &lt;- plot_grid(umap_p1, umap_p2, umap_p3, umap_p4, nrow = 2, labels = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;) ) umap_p_combined png(file = &quot;./figures/Supplementary Fig 8.png&quot;, width = 6000, height = 6200, res = 600) print(umap_p_combined) dev.off() pdf(file = &quot;../supplementary_figures/Supplementary Fig 8.pdf&quot;, width = 12, height = 12.4) print(umap_p_combined) dev.off() 5.3 Comparison of amino acid frequencies between species 5.3.1 Analysis Python: library(reticulate) use_condaenv(&quot;/Users/renee/Library/r-miniconda/envs/purf/bin/python&quot;) from Bio import SeqIO import pandas as pd ds = pd.read_csv(&#39;./data/supplementary_data_5_pfpv_purf_oob_predictions.csv&#39;, index_col=0) pv_records = list(SeqIO.parse(&#39;./other_data/combined_PlasmoDB-45_PvivaxP01_AnnotatedProteins_no_pseudo_genes_special_sequences_modified.fasta&#39;, &#39;fasta&#39;)) pf_records = list(SeqIO.parse(&#39;./other_data/combined_PlasmoDB-43_Pfalciparum3D7_AnnotatedProteins_no_pseudo_genes_special_sequences_modified.fasta&#39;, &#39;fasta&#39;)) pv_pos = ds[(ds[&#39;OOB score filtered&#39;] &gt;= 0.5) &amp; (ds[&#39;species&#39;] == &#39;pv&#39;)].index pf_pos = ds[(ds[&#39;OOB score filtered&#39;] &gt;= 0.5) &amp; (ds[&#39;species&#39;] == &#39;pf&#39;)].index pv_neg = ds[(ds[&#39;OOB score filtered&#39;] &lt; 0.5) &amp; (ds[&#39;species&#39;] == &#39;pv&#39;)].index pf_neg = ds[(ds[&#39;OOB score filtered&#39;] &lt; 0.5) &amp; (ds[&#39;species&#39;] == &#39;pf&#39;)].index pv_pos_records = [record for record in pv_records if record.id in pv_pos] pf_pos_records = [record for record in pf_records if record.id in pf_pos] pv_neg_records = [record for record in pv_records if record.id in pv_neg] pf_neg_records = [record for record in pf_records if record.id in pf_neg] aa_freq = {} for i in &#39;ACDEFGHIKLMNPQRSTVWY&#39;: aa_freq[i] = [0, 0, 0, 0, 0, 0] for record in pv_records: for char in record.seq: aa_freq[char][0] += 1 for record in pf_records: for char in record.seq: aa_freq[char][1] += 1 for record in pv_pos_records: for char in record.seq: aa_freq[char][2] += 1 for record in pf_pos_records: for char in record.seq: aa_freq[char][3] += 1 for record in pv_neg_records: for char in record.seq: aa_freq[char][4] += 1 for record in pf_neg_records: for char in record.seq: aa_freq[char][5] += 1 res = pd.DataFrame.from_dict(aa_freq) res.index = [&#39;pv&#39;, &#39;pf&#39;, &#39;pv_pos&#39;, &#39;pf_pos&#39;, &#39;pv_neg&#39;, &#39;pf_neg&#39;] res.to_csv(&#39;./other_data/pfpv_aa_freq.csv&#39;) In R: library(rcompanion) library(rlist) library(DT) scientific &lt;- function(x) { ifelse(x == 0, &quot;0&quot;, gsub(&quot;e&quot;, &quot; * 10^&quot;, scientific_format(digits = 3)(x))) } ds &lt;- read.csv(&quot;./other_data/pfpv_aa_freq.csv&quot;, row.names = 1) chisq_pval &lt;- c() cramer_res &lt;- list() # Comparison between Pv and Pf M &lt;- as.table(as.matrix(ds[1:2, ])) Xsq &lt;- chisq.test(M, correct = FALSE) cramerV &lt;- cramerV(M, ci = TRUE, R = 100) chisq_pval &lt;- c(chisq_pval, Xsq$p.value) cramer_res &lt;- list.append(cramer_res, sprintf(&quot;%0.2f&quot;, cramerV)) # Comparison between Pv and Pf positives M &lt;- as.table(as.matrix(ds[3:4, ])) Xsq &lt;- chisq.test(M, correct = FALSE) cramerV &lt;- cramerV(M, ci = TRUE, R = 100) chisq_pval &lt;- c(chisq_pval, Xsq$p.value) cramer_res &lt;- list.append(cramer_res, sprintf(&quot;%0.2f&quot;, cramerV)) # Comparison between Pv and Pf negatives M &lt;- as.table(as.matrix(ds[5:6, ])) Xsq &lt;- chisq.test(M, correct = FALSE) cramerV &lt;- cramerV(M, ci = TRUE, R = 100) chisq_pval &lt;- c(chisq_pval, Xsq$p.value) cramer_res &lt;- list.append(cramer_res, sprintf(&quot;%0.2f&quot;, cramerV)) # Save results df &lt;- as.data.frame(cbind( c(&quot;Pv vs. Pf&quot;, &quot;Pv pos vs. Pf pos&quot;, &quot;Pv neg vs. Pf neg&quot;), chisq_pval, do.call(rbind, cramer_res) )) colnames(df) &lt;- c(&quot;PURF model&quot;, &quot;Chi-squared test p-value&quot;, &quot;Cramer&#39;s V&quot;, &quot;Lower CI&quot;, &quot;Upper CI&quot;) df$`Chi-squared test p-value` &lt;- sapply(as.numeric(df$`Chi-squared test p-value`), scientific) save(df, file = &quot;./rdata/pfpv_aa_freq_comparisons.RData&quot;) load(&quot;./rdata/pfpv_aa_freq_comparisons.RData&quot;) df %&gt;% datatable(rownames = FALSE) 5.4 Variable importance 5.4.1 Analysis In Python: library(reticulate) use_condaenv(&quot;/Users/renee/Library/r-miniconda/envs/purf/bin/python&quot;) import pickle import pandas as pd import numpy as np from sklearn.utils import shuffle import pickle from sklearn.impute import SimpleImputer from sklearn.preprocessing import MinMaxScaler from scipy.spatial import distance import multiprocessing from joblib import Parallel, delayed num_cores = multiprocessing.cpu_count() from sklearn.ensemble._forest import _generate_unsampled_indices import session_info def calculate_raw_var_imp_(idx, tree, X, y, weight, groups=None): rng = np.random.RandomState(idx) oob_indices = _generate_unsampled_indices(tree.random_state, y.shape[0], y.shape[0]) oob_pos = np.intersect1d(oob_indices, np.where(y == 1)[0]) noutall = len(oob_pos) pred = tree.predict_proba(X.iloc[oob_pos,:])[:, 1] nrightall = sum(pred == y[oob_pos]) imprt, impsd = [], [] if groups is None: for var in range(X.shape[1]): X_temp = X.copy() X_temp.iloc[:, var] = rng.permutation(X_temp.iloc[:, var]) pred = tree.predict_proba(X_temp.iloc[oob_pos,:])[:, 1] nrightimpall = sum(pred == y[oob_pos]) delta = (nrightall - nrightimpall) / noutall * weight imprt.append(delta) impsd.append(delta * delta) else: for grp in np.unique(groups): X_temp = X.copy() X_temp.iloc[:, groups == grp] = rng.permutation(X_temp.iloc[:, groups == grp]) pred = tree.predict_proba(X_temp.iloc[oob_pos,:])[:, 1] nrightimpall = sum(pred == y[oob_pos]) delta = (nrightall - nrightimpall) / noutall * weight imprt.append(delta) impsd.append(delta * delta) return (imprt, impsd) def calculate_var_imp(model, features, outcome, num_cores, weights=None, groups=None): trees = model.estimators_ idx_list = [i for i in range(len(trees))] if weights is None: weights = np.ones(len(trees)) res = Parallel(n_jobs=num_cores)( delayed(calculate_raw_var_imp_)(idx, trees[idx], features, outcome, weights[idx], groups) for idx in idx_list) imprt, impsd = [], [] for i in range(len(idx_list)): imprt.append(res[i][0]) impsd.append(res[i][1]) imprt = np.array(imprt).sum(axis=0) impsd = np.array(impsd).sum(axis=0) imprt /= sum(weights) impsd = np.sqrt(((impsd / sum(weights)) - imprt * imprt) / sum(weights)) mda = [] for i in range(len(imprt)): if impsd[i] != 0: mda.append(imprt[i] / impsd[i]) else: mda.append(imprt[i]) if groups is None: var_imp = pd.DataFrame({&#39;variable&#39;: features.columns, &#39;meanDecreaseAccuracy&#39;: mda}) else: var_imp = pd.DataFrame({&#39;variable&#39;: np.unique(groups), &#39;meanDecreaseAccuracy&#39;: mda}) return var_imp 5.4.1.1 Pv data set In Python: data = pd.read_csv(&#39;./other_data/pv_ml_input.csv&#39;, index_col=0) features = data.iloc[:, 1:] outcome = np.array(data.antigen_label) features, outcome = shuffle(features, outcome, random_state=0) # Imputation imputer = SimpleImputer(strategy=&#39;median&#39;) X = imputer.fit_transform(features) X = pd.DataFrame(X, index=features.index, columns=features.columns) y = outcome features = X print(&#39;There are %d positives out of %d samples before feature space weighting.&#39; % (sum(y), len(y))) # Feature space weighting lab_pos = X.loc[y==1,:] median = np.median(lab_pos, axis=0) # Feature space weighting lab_pos = X.loc[y==1,:] median = np.median(lab_pos, axis=0) scaler = MinMaxScaler(feature_range=(1,10)) dist = list() for i in range(lab_pos.shape[0]): dist.append(distance.euclidean(lab_pos.iloc[i, :], median)) dist = np.asarray(dist).reshape(-1, 1) counts = np.round(scaler.fit_transform(dist)) counts = np.array(counts, dtype=np.int64)[:, 0] X_temp = X.iloc[y==1, :] X = X.iloc[y==0, :] y = np.asarray([0] * X.shape[0] + [1] * (sum(counts))) appended_data = [X] for i in range(len(counts)): appended_data.append(pd.concat([X_temp.iloc[[i]]] * counts[i])) X = pd.concat(appended_data) print(&#39;There are %d positives out of %d samples after feature space weighting.&#39; % (sum(y), len(y))) features = X outcome = y X.to_csv(&#39;./other_data/pv_ml_input_processed_weighted.csv&#39;) purf_model = pickle.load(open(&#39;./pickle_data/pv_0.5_purf_tree_filtering.pkl&#39;, &#39;rb&#39;)) purf = purf_model[&#39;model&#39;] weights = purf_model[&#39;weights&#39;] metadata = pd.read_csv(&#39;./data/supplementary_data_1_protein_variable_metadata.csv&#39;) groups = metadata.loc[np.isin(metadata[&#39;column name&#39;], features.columns), &#39;category&#39;].array var_imp = calculate_var_imp(purf, features, outcome, 8, weights) grp_var_imp = calculate_var_imp(purf, features, outcome, 8, weights, groups) var_imp.to_csv(&#39;./other_data/pv_known_antigen_variable_importance.csv&#39;, index=False) grp_var_imp.to_csv(&#39;./other_data/pv_known_antigen_group_variable_importance.csv&#39;, index=False) In R: prediction &lt;- read.csv(&quot;./data/supplementary_data_3_pv_purf_oob_predictions.csv&quot;, check.names = FALSE) known_antigens &lt;- prediction[prediction$antigen_label == 1, ]$protein_id other_proteins &lt;- prediction[prediction$antigen_label == 0 &amp; prediction$`OOB score filtered` &lt; 0.5, ]$protein_id set.seed(22) random_proteins &lt;- sample(other_proteins, size = length(known_antigens), replace = FALSE) # Load imputed data data &lt;- read.csv(&quot;./other_data/pv_ml_input_processed_weighted.csv&quot;) data &lt;- data[!duplicated(data), ] compared_group &lt;- sapply(data$protein_id, function(x) if (x %in% known_antigens) 1 else if (x %in% random_proteins) 0 else -1) data &lt;- data[, 2:ncol(data)] # Min-max normalization min_max &lt;- function(x) { (x - min(x)) / (max(x) - min(x)) } data &lt;- data.frame(lapply(data, min_max)) save(compared_group, data, file = &quot;./rdata/pv_known_antigen_wilcox_data.RData&quot;) load(file = &quot;./rdata/pv_known_antigen_wilcox_data.RData&quot;) pval &lt;- c() for (i in 1:ncol(data)) { pval &lt;- c(pval, wilcox.test(data[compared_group == 1, i], data[compared_group == 0, i])$p.value) } adj_pval &lt;- p.adjust(pval, method = &quot;BH&quot;, n = length(pval)) wilcox_res &lt;- data.frame(variable = colnames(data), adj_pval = adj_pval) write.csv(wilcox_res, &quot;./other_data/pv_known_antigen_wilcox_res.csv&quot;, row.names = FALSE) 5.4.1.2 Pv + Pf combined data set In Python: data = pd.read_csv(&#39;./data/supplementary_data_4_pfpv_ml_input.csv&#39;, index_col=0) features = data.iloc[:, 1:] outcome = np.array(data.antigen_label) features, outcome = shuffle(features, outcome, random_state=0) # Imputation imputer = SimpleImputer(strategy=&#39;median&#39;) X = imputer.fit_transform(features) X = pd.DataFrame(X, index=features.index, columns=features.columns) y = outcome features = X print(&#39;There are %d positives out of %d samples before feature space weighting.&#39; % (sum(y), len(y))) # Feature space weighting lab_pos = X.loc[y==1,:] median = np.median(lab_pos, axis=0) # Feature space weighting lab_pos = X.loc[y==1,:] median = np.median(lab_pos, axis=0) scaler = MinMaxScaler(feature_range=(1,10)) dist = list() for i in range(lab_pos.shape[0]): dist.append(distance.euclidean(lab_pos.iloc[i, :], median)) dist = np.asarray(dist).reshape(-1, 1) counts = np.round(scaler.fit_transform(dist)) counts = np.array(counts, dtype=np.int64)[:, 0] X_temp = X.iloc[y==1, :] X = X.iloc[y==0, :] y = np.asarray([0] * X.shape[0] + [1] * (sum(counts))) appended_data = [X] for i in range(len(counts)): appended_data.append(pd.concat([X_temp.iloc[[i]]] * counts[i])) X = pd.concat(appended_data) print(&#39;There are %d positives out of %d samples after feature space weighting.&#39; % (sum(y), len(y))) features = X outcome = y X.to_csv(&#39;./other_data/pfpv_ml_input_processed_weighted.csv&#39;) purf_model = pickle.load(open(&#39;./pickle_data/pfpv_0.5_purf_tree_filtering.pkl&#39;, &#39;rb&#39;)) purf = purf_model[&#39;model&#39;] weights = purf_model[&#39;weights&#39;] metadata = pd.read_csv(&#39;./data/supplementary_data_1_protein_variable_metadata.csv&#39;) groups = metadata.loc[np.isin(metadata[&#39;column name&#39;], features.columns), &#39;category&#39;].array var_imp = calculate_var_imp(purf, features, outcome, 8, weights) grp_var_imp = calculate_var_imp(purf, features, outcome, 8, weights, groups) var_imp.to_csv(&#39;./other_data/pfpv_known_antigen_variable_importance.csv&#39;, index=False) grp_var_imp.to_csv(&#39;./other_data/pfpv_known_antigen_group_variable_importance.csv&#39;, index=False) In R: prediction &lt;- read.csv(&quot;./data/supplementary_data_5_pfpv_purf_oob_predictions.csv&quot;, check.names = FALSE) known_antigens &lt;- prediction[prediction$antigen_label == 1, ]$protein_id other_proteins &lt;- prediction[prediction$antigen_label == 0 &amp; prediction$`OOB score filtered` &lt; 0.5, ]$protein_id set.seed(22) random_proteins &lt;- sample(other_proteins, size = length(known_antigens), replace = FALSE) # Load imputed data data &lt;- read.csv(&quot;./other_data/pfpv_ml_input_processed_weighted.csv&quot;) data &lt;- data[!duplicated(data), ] compared_group &lt;- sapply(data$protein_id, function(x) if (x %in% known_antigens) 1 else if (x %in% random_proteins) 0 else -1) data &lt;- data[, 2:ncol(data)] # Min-max normalization min_max &lt;- function(x) { (x - min(x)) / (max(x) - min(x)) } data &lt;- data.frame(lapply(data, min_max)) save(compared_group, data, file = &quot;./rdata/pfpv_known_antigen_wilcox_data.RData&quot;) load(file = &quot;./rdata/pfpv_known_antigen_wilcox_data.RData&quot;) pval &lt;- c() for (i in 1:ncol(data)) { pval &lt;- c(pval, wilcox.test(data[compared_group == 1, i], data[compared_group == 0, i])$p.value) } adj_pval &lt;- p.adjust(pval, method = &quot;BH&quot;, n = length(pval)) wilcox_res &lt;- data.frame(variable = colnames(data), adj_pval = adj_pval) write.csv(wilcox_res, &quot;./other_data/pfpv_known_antigen_wilcox_res.csv&quot;, row.names = FALSE) 5.4.2 Plotting In R: library(ggplot2) library(reshape2) library(cowplot) library(stringr) colorset &lt;- c(&quot;genomic&quot; = &quot;#0C1C63&quot;, &quot;immunological&quot; = &quot;#408002&quot;, &quot;proteomic&quot; = &quot;#0F80FF&quot;, &quot;structural&quot; = &quot;#FEAE34&quot;) 5.4.2.1 Pv data set # Variable importance var_imp &lt;- read.csv(&quot;./other_data/pv_known_antigen_variable_importance.csv&quot;) var_imp &lt;- var_imp[order(-var_imp$meanDecreaseAccuracy), ] var_imp &lt;- var_imp[1:10, ] metadata &lt;- read.csv(&quot;./data/supplementary_data_1_protein_variable_metadata.csv&quot;, check.names = FALSE) metadata &lt;- metadata[c(&quot;category&quot;, &quot;column name&quot;)] metadata &lt;- metadata[metadata$`column name` %in% var_imp$variable, ] var_imp &lt;- merge(x = var_imp, y = metadata, by.x = &quot;variable&quot;, by.y = &quot;column name&quot;) var_imp$category &lt;- factor(var_imp$category, levels = names(colorset)) var_imp$color &lt;- sapply(var_imp$category, function(x) colorset[x]) var_imp$variable_ &lt;- c( &quot;GPI-anchor specificity score&quot;, &quot;Total length of the low\\n complexity regions&quot;, &quot;Maximum score of Chou and\\n Fasman beta turn&quot;, &quot;Maximum score of Kolaskar and\\n Tongaonkar antigenicity&quot;, &quot;Maximum score of B-cell\\n epitopes (BepiPred-1.0)&quot;, &quot;Maximum score of IFN-gamma\\n inducing epitopes&quot;, &quot;Minimum score of B-cell\\n epitopes (BepiPred-1.0)&quot;, &quot;Number of non-synonymous SNPs&quot;, &quot;Number of IFN-gamma inducing\\n epitopes&quot;, &quot;Secretory signal peptide\\n probability&quot; ) p1 &lt;- ggplot(var_imp, aes( x = reorder(variable_, meanDecreaseAccuracy), y = meanDecreaseAccuracy, fill = category )) + geom_point(size = 3, pch = 21, color = &quot;black&quot;, alpha = 0.8) + scale_fill_manual(values = colorset, labels = c(&quot;Genomic&quot;, &quot;Immunological&quot;, &quot;Proteomic&quot;, &quot;Structural&quot;)) + coord_flip() + ylim(min(var_imp$meanDecreaseAccuracy), max(var_imp$meanDecreaseAccuracy) + 1) + theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.grid.major.y = element_line(color = &quot;grey80&quot;, linewidth = 0.3, linetype = &quot;dotted&quot;), strip.background = element_blank(), panel.border = element_rect(color = &quot;black&quot;), legend.text = element_text(color = &quot;black&quot;), plot.title = element_text(hjust = 0.5, size = 20), plot.margin = ggplot2::margin(10, 10, 0, 10, &quot;pt&quot;), axis.title.x = element_text(color = &quot;black&quot;), axis.title.y = element_text(color = &quot;black&quot;), axis.text.x = element_text(color = &quot;black&quot;), axis.text.y = element_text(color = &quot;black&quot;), legend.title = element_blank(), legend.position = c(0.8, 0.2), legend.background = element_rect(colour = &quot;black&quot;, linewidth = 0.2) ) + xlab(&quot;&quot;) + ylab(&quot;Mean decrease in accuracy&quot;) # Group variable importance grp_var_imp &lt;- read.csv(&quot;./other_data/pv_known_antigen_group_variable_importance.csv&quot;) grp_var_imp_ &lt;- grp_var_imp firstup &lt;- function(x) { substr(x, 1, 1) &lt;- toupper(substr(x, 1, 1)) return(x) } grp_var_imp_$variable &lt;- sapply(grp_var_imp_$variable, function(x) { x &lt;- str_replace_all(x, &quot;[_\\\\.]&quot;, &quot; &quot;) x &lt;- firstup(x) return(x) }) grp_var_imp_$category &lt;- factor(tolower(grp_var_imp_$variable)) p2 &lt;- ggplot(grp_var_imp_, aes(x = reorder(variable, meanDecreaseAccuracy), y = meanDecreaseAccuracy, fill = category)) + geom_point(size = 3, pch = 21, color = &quot;black&quot;, alpha = 0.8) + scale_fill_manual(values = colorset, labels = c(&quot;Genomic&quot;, &quot;Immunological&quot;, &quot;Proteomic&quot;, &quot;Structural&quot;)) + coord_flip() + ylim(min(grp_var_imp$meanDecreaseAccuracy), max(grp_var_imp$meanDecreaseAccuracy) + 5) + theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.grid.major.y = element_line(color = &quot;grey80&quot;, linewidth = 0.3, linetype = &quot;dotted&quot;), strip.background = element_blank(), panel.border = element_rect(color = &quot;black&quot;), legend.text = element_text(color = &quot;black&quot;, size = 10), plot.title = element_text(hjust = 0.5, size = 20), plot.margin = ggplot2::margin(30, 10, 10, 90, &quot;pt&quot;), axis.title.x = element_text(color = &quot;black&quot;), axis.title.y = element_text(color = &quot;black&quot;), axis.text.x = element_text(color = &quot;black&quot;), axis.text.y = element_text(color = &quot;black&quot;), legend.position = &quot;none&quot; ) + xlab(&quot;&quot;) + ylab(&quot;Mean decrease in accuracy&quot;) # Wilcoxon text load(file = &quot;./rdata/pv_known_antigen_wilcox_data.RData&quot;) wilcox_res &lt;- read.csv(&quot;./other_data/pv_known_antigen_wilcox_res.csv&quot;) wilcox_data &lt;- data wilcox_data$compared_group &lt;- compared_group wilcox_data &lt;- wilcox_data[wilcox_data$compared_group != -1, ] wilcox_data &lt;- melt(wilcox_data, id = c(&quot;compared_group&quot;)) wilcox_data &lt;- merge(x = wilcox_data, y = merge(x = var_imp, y = wilcox_res), by = &quot;variable&quot;, all.y = TRUE) wilcox_data$tile_pos &lt;- rep(0, nrow(wilcox_data)) wilcox_data$compared_group &lt;- factor(wilcox_data$compared_group) wilcox_data$variable &lt;- sapply(wilcox_data$variable, function(x) { x &lt;- str_replace_all(x, &quot;[_\\\\.]&quot;, &quot; &quot;) x &lt;- firstup(x) return(x) }) adj_pval_tmp &lt;- c() for (i in 1:nrow(wilcox_data)) { x &lt;- wilcox_data$adj_pval[i] a &lt;- strsplit(format(x, scientific = TRUE, digits = 3), &quot;e&quot;)[[1]] res &lt;- paste0(sprintf(&quot;%0.2f&quot;, as.numeric(a[1])), &quot; %*% 10^&quot;, as.integer(a[2])) adj_pval_tmp &lt;- c(adj_pval_tmp, res) } wilcox_data$adj_pval &lt;- adj_pval_tmp p3 &lt;- ggplot(wilcox_data, aes(x = reorder(variable, meanDecreaseAccuracy), y = value, fill = compared_group)) + geom_boxplot(outlier.color = NA, alpha = 0.3, lwd = 0.3) + geom_point( color = &quot;black&quot;, shape = 21, stroke = 0.3, alpha = 0.5, size = 0.5, position = position_jitterdodge() ) + geom_text(aes(label = adj_pval), y = 1.1, size = 3, fontface = &quot;plain&quot;, family = &quot;sans&quot;, hjust = 0, parse = TRUE ) + geom_vline(xintercept = 1:9 + 0.5, color = &quot;grey80&quot;, linetype = &quot;solid&quot;, linewidth = 0.1) + coord_flip(ylim = c(0, 1), clip = &quot;off&quot;) + scale_fill_manual( breaks = c(&quot;1&quot;, &quot;0&quot;), values = c(&quot;#FF007F&quot;, &quot;#0080FF&quot;), labels = c(&quot;Known antigens&quot;, &quot;Random predicted non-antigens&quot;) ) + theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), strip.background = element_blank(), panel.border = element_rect(linewidth = 0.2, colour = &quot;black&quot;), plot.title = element_text(hjust = 0.5), plot.margin = ggplot2::margin(10, 90, 0, -20, &quot;pt&quot;), legend.text = element_text(colour = &quot;black&quot;), axis.title.x = element_text(color = &quot;black&quot;), axis.title.y = element_text(color = &quot;black&quot;), axis.text.x = element_text(color = &quot;black&quot;), axis.text.y = element_blank(), axis.ticks.y = element_blank(), legend.position = &quot;none&quot; ) + xlab(&quot;&quot;) + ylab(&quot;Normalized variable value&quot;) legend &lt;- get_legend(p3 + theme( legend.title = element_blank(), legend.background = element_blank(), legend.key = element_blank(), legend.direction = &quot;horizontal&quot;, legend.position = c(0.35, 0.9) )) p_combined &lt;- plot_grid(plot_grid(p1, p3, labels = c(&quot;a&quot;, &quot;&quot;), rel_widths = c(0.57, 0.43)), plot_grid(p2, NULL, legend, labels = c(&quot;b&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;), nrow = 1, rel_widths = c(0.57, 0.01, 0.42) ), ncol = 1, rel_heights = c(0.65, 0.35) ) p_combined 5.4.2.2 Pv + Pf combined data set # Variable importance var_imp &lt;- read.csv(&quot;./other_data/pfpv_known_antigen_variable_importance.csv&quot;) var_imp &lt;- var_imp[order(-var_imp$meanDecreaseAccuracy), ] var_imp &lt;- var_imp[1:10, ] metadata &lt;- read.csv(&quot;./data/supplementary_data_1_protein_variable_metadata.csv&quot;, check.names = FALSE) metadata &lt;- metadata[c(&quot;category&quot;, &quot;column name&quot;)] metadata &lt;- metadata[metadata$`column name` %in% var_imp$variable, ] var_imp &lt;- merge(x = var_imp, y = metadata, by.x = &quot;variable&quot;, by.y = &quot;column name&quot;) var_imp$category &lt;- factor(var_imp$category, levels = names(colorset)) var_imp$color &lt;- sapply(var_imp$category, function(x) colorset[x]) var_imp$variable_ &lt;- c( &quot;Percentage of aspartic acid\\n minus percentage of glutamic acid&quot;, &quot;GPI-anchor specificity score&quot;, &quot;Total length of the low\\n complexity regions&quot;, &quot;Maximum score of Parker\\n hydrophilicity&quot;, &quot;Number of non-synonymous SNPs&quot;, &quot;Percentage of amino acids with\\n normalized van der Waals volume\\n between 4.03–8.08&quot;, &quot;Number of IFN-gamma inducing\\n epitopes&quot;, &quot;Percentage of amino acids with\\n polarizability between 0.219–0.409&quot;, &quot;Small amino acid percentage&quot;, &quot;Secretory signal peptide\\n probability&quot; ) p1 &lt;- ggplot(var_imp, aes(x = reorder(variable_, meanDecreaseAccuracy), y = meanDecreaseAccuracy, fill = category)) + geom_point(size = 3, pch = 21, color = &quot;black&quot;, alpha = 0.8) + scale_fill_manual(values = colorset, labels = c(&quot;Genomic&quot;, &quot;Immunological&quot;, &quot;Proteomic&quot;, &quot;Structural&quot;)) + coord_flip() + ylim(min(var_imp$meanDecreaseAccuracy), max(var_imp$meanDecreaseAccuracy) + 1) + theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.grid.major.y = element_line(color = &quot;grey80&quot;, linewidth = 0.3, linetype = &quot;dotted&quot;), strip.background = element_blank(), panel.border = element_rect(color = &quot;black&quot;), legend.text = element_text(color = &quot;black&quot;), plot.title = element_text(hjust = 0.5, size = 20), plot.margin = ggplot2::margin(10, 10, 0, 10, &quot;pt&quot;), axis.title.x = element_text(color = &quot;black&quot;), axis.title.y = element_text(color = &quot;black&quot;), axis.text.x = element_text(color = &quot;black&quot;), axis.text.y = element_text(color = &quot;black&quot;), legend.title = element_blank(), legend.position = c(0.8, 0.2), legend.background = element_rect(colour = &quot;black&quot;, linewidth = 0.2) ) + xlab(&quot;&quot;) + ylab(&quot;Mean decrease in accuracy&quot;) # Group variable importance grp_var_imp &lt;- read.csv(&quot;./other_data/pfpv_known_antigen_group_variable_importance.csv&quot;) grp_var_imp_ &lt;- grp_var_imp firstup &lt;- function(x) { substr(x, 1, 1) &lt;- toupper(substr(x, 1, 1)) return(x) } grp_var_imp_$variable &lt;- sapply(grp_var_imp_$variable, function(x) { x &lt;- str_replace_all(x, &quot;[_\\\\.]&quot;, &quot; &quot;) x &lt;- firstup(x) return(x) }) grp_var_imp_$category &lt;- factor(tolower(grp_var_imp_$variable)) p2 &lt;- ggplot(grp_var_imp_, aes(x = reorder(variable, meanDecreaseAccuracy), y = meanDecreaseAccuracy, fill = category)) + geom_point(size = 3, pch = 21, color = &quot;black&quot;, alpha = 0.8) + scale_fill_manual(values = colorset, labels = c(&quot;Genomic&quot;, &quot;Immunological&quot;, &quot;Proteomic&quot;, &quot;Structural&quot;)) + coord_flip() + ylim(min(grp_var_imp$meanDecreaseAccuracy), max(grp_var_imp$meanDecreaseAccuracy) + 5) + theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.grid.major.y = element_line(color = &quot;grey80&quot;, linewidth = 0.3, linetype = &quot;dotted&quot;), strip.background = element_blank(), panel.border = element_rect(color = &quot;black&quot;), legend.text = element_text(color = &quot;black&quot;, size = 10), plot.title = element_text(hjust = 0.5, size = 20), plot.margin = ggplot2::margin(30, 10, 10, 90, &quot;pt&quot;), axis.title.x = element_text(color = &quot;black&quot;), axis.title.y = element_text(color = &quot;black&quot;), axis.text.x = element_text(color = &quot;black&quot;), axis.text.y = element_text(color = &quot;black&quot;), legend.position = &quot;none&quot; ) + xlab(&quot;&quot;) + ylab(&quot;Mean decrease in accuracy&quot;) # Wilcoxon text load(file = &quot;./rdata/pfpv_known_antigen_wilcox_data.RData&quot;) wilcox_res &lt;- read.csv(&quot;./other_data/pfpv_known_antigen_wilcox_res.csv&quot;) wilcox_data &lt;- data wilcox_data$compared_group &lt;- compared_group wilcox_data &lt;- wilcox_data[wilcox_data$compared_group != -1, ] wilcox_data &lt;- melt(wilcox_data, id = c(&quot;compared_group&quot;)) wilcox_data &lt;- merge(x = wilcox_data, y = merge(x = var_imp, y = wilcox_res), by = &quot;variable&quot;, all.y = TRUE) wilcox_data$tile_pos &lt;- rep(0, nrow(wilcox_data)) wilcox_data$compared_group &lt;- factor(wilcox_data$compared_group) wilcox_data$variable &lt;- sapply(wilcox_data$variable, function(x) { x &lt;- str_replace_all(x, &quot;[_\\\\.]&quot;, &quot; &quot;) x &lt;- firstup(x) return(x) }) adj_pval_tmp &lt;- c() for (i in 1:nrow(wilcox_data)) { x &lt;- wilcox_data$adj_pval[i] a &lt;- strsplit(format(x, scientific = TRUE, digits = 3), &quot;e&quot;)[[1]] res &lt;- paste0(sprintf(&quot;%0.2f&quot;, as.numeric(a[1])), &quot; %*% 10^&quot;, as.integer(a[2])) adj_pval_tmp &lt;- c(adj_pval_tmp, res) } wilcox_data$adj_pval &lt;- adj_pval_tmp p3 &lt;- ggplot(wilcox_data, aes(x = reorder(variable, meanDecreaseAccuracy), y = value, fill = compared_group)) + geom_boxplot(outlier.color = NA, alpha = 0.3, lwd = 0.3) + geom_point( color = &quot;black&quot;, shape = 21, stroke = 0.3, alpha = 0.5, size = 0.5, position = position_jitterdodge() ) + geom_text(aes(label = adj_pval), y = 1.1, size = 3, fontface = &quot;plain&quot;, family = &quot;sans&quot;, hjust = 0, parse = TRUE ) + geom_vline(xintercept = 1:9 + 0.5, color = &quot;grey80&quot;, linetype = &quot;solid&quot;, linewidth = 0.1) + coord_flip(ylim = c(0, 1), clip = &quot;off&quot;) + scale_fill_manual( breaks = c(&quot;1&quot;, &quot;0&quot;), values = c(&quot;#FF007F&quot;, &quot;#0080FF&quot;), labels = c(&quot;Known antigens&quot;, &quot;Random predicted non-antigens&quot;) ) + theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), strip.background = element_blank(), panel.border = element_rect(linewidth = 0.2, colour = &quot;black&quot;), plot.title = element_text(hjust = 0.5), plot.margin = ggplot2::margin(10, 90, 0, -20, &quot;pt&quot;), legend.text = element_text(colour = &quot;black&quot;), axis.title.x = element_text(color = &quot;black&quot;), axis.title.y = element_text(color = &quot;black&quot;), axis.text.x = element_text(color = &quot;black&quot;), axis.text.y = element_blank(), axis.ticks.y = element_blank(), legend.position = &quot;none&quot; ) + xlab(&quot;&quot;) + ylab(&quot;Normalized variable value&quot;) legend &lt;- get_legend(p3 + theme( legend.title = element_blank(), legend.background = element_blank(), legend.key = element_blank(), legend.direction = &quot;horizontal&quot;, legend.position = c(0.35, 0.9) )) p_combined &lt;- plot_grid(plot_grid(p1, p3, labels = c(&quot;a&quot;, &quot;&quot;), rel_widths = c(0.57, 0.43)), plot_grid(p2, NULL, legend, labels = c(&quot;b&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;), nrow = 1, rel_widths = c(0.57, 0.01, 0.42) ), ncol = 1, rel_heights = c(0.65, 0.35) ) p_combined 5.4.3 Comparison of top 10 important variables 5.4.3.1 Venn diagram 5.4.3.2 Top 10 variables from combined model In R library(ggrepel) data &lt;- read.csv(&quot;./other_data/pfpv_top_10_imp_vars.csv&quot;) data$variable &lt;- c( &quot;Secretory signal peptide\\n probability&quot;, &quot;Percentage of amino acids with\\n normalized van der Waals volume\\n between 4.03–8.08&quot;, &quot;Percentage of amino acids with\\n polarizability between 0.219–0.409&quot;, &quot;GPI-anchor specificity score&quot;, &quot;Number of non-synonymous SNPs&quot;, &quot;Total length of the low\\n complexity regions&quot;, &quot;Percentage of aspartic acid\\n minus percentage of glutamic acid&quot;, &quot;Small amino acid percentage&quot;, &quot;Number of IFN-gamma inducing\\n epitopes&quot;, &quot;Maximum score of Parker\\n hydrophilicity&quot; ) p1 &lt;- ggplot(data, aes(x = pf_single_model, y = pfpv_combined_model, label = variable)) + geom_abline(intercept = 0, slope = 1, alpha = 0.3) + geom_point() + geom_text_repel( size = 2.5, point.padding = 0, min.segment.length = 0, max.time = 1, max.iter = 1e5, seed = 42, box.padding = 0.3, segment.color = &quot;grey30&quot;, segment.size = 0.2, lineheight = 1 ) + theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), strip.background = element_blank(), panel.border = element_rect(linewidth = 0.2, colour = &quot;black&quot;), plot.title = element_text(hjust = 0.5), plot.margin = ggplot2::margin(5, 0, 0, 5, &quot;pt&quot;), legend.text = element_text(colour = &quot;black&quot;), axis.title.x = element_blank(), axis.title.y = element_text(color = &quot;black&quot;), axis.text.x = element_blank(), axis.text.y = element_text(color = &quot;black&quot;), axis.ticks.x = element_blank(), legend.position = &quot;none&quot; ) + ylab(&quot;Combined model&quot;) + xlim(0, 110) + ylim(0, 110) p2 &lt;- ggplot(data, aes(x = pv_single_model, y = pfpv_combined_model, label = variable)) + geom_abline(intercept = 0, slope = 1, alpha = 0.3) + geom_point() + geom_text_repel( size = 2.5, point.padding = 0, min.segment.length = 0, max.time = 1, max.iter = 1e5, seed = 42, box.padding = 0.3, segment.color = &quot;grey30&quot;, segment.size = 0.2, lineheight = 1 ) + theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), strip.background = element_blank(), panel.border = element_rect(linewidth = 0.2, colour = &quot;black&quot;), plot.title = element_text(hjust = 0.5), plot.margin = ggplot2::margin(5, 5, 0, 0, &quot;pt&quot;), legend.text = element_text(colour = &quot;black&quot;), axis.title.x = element_text(color = &quot;black&quot;), axis.title.y = element_blank(), axis.text.x = element_text(color = &quot;black&quot;), axis.text.y = element_blank(), axis.ticks.y = element_blank(), legend.position = &quot;none&quot; ) + xlab(expression(paste(italic(&quot;P. vivax&quot;), &quot; model&quot;))) + xlim(0, 110) + ylim(0, 110) p3 &lt;- ggplot(data, aes(x = pf_single_model, y = pv_single_model, label = variable)) + geom_abline(intercept = 0, slope = 1, alpha = 0.3) + geom_point() + geom_text_repel( size = 2.5, point.padding = 0, min.segment.length = 0, max.time = 1, max.iter = 1e5, seed = 42, box.padding = 0.3, segment.color = &quot;grey30&quot;, segment.size = 0.2, lineheight = 1 ) + theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), strip.background = element_blank(), panel.border = element_rect(linewidth = 0.2, colour = &quot;black&quot;), plot.title = element_text(hjust = 0.5), plot.margin = ggplot2::margin(0, 0, 5, 5, &quot;pt&quot;), legend.text = element_text(colour = &quot;black&quot;), axis.title.x = element_text(color = &quot;black&quot;), axis.title.y = element_text(color = &quot;black&quot;), axis.text.x = element_text(color = &quot;black&quot;), axis.text.y = element_text(color = &quot;black&quot;), legend.position = &quot;none&quot; ) + xlab(expression(paste(italic(&quot;P. falciparum&quot;), &quot; model&quot;))) + ylab(expression(paste(italic(&quot;P. vivax&quot;), &quot; model&quot;))) + xlim(0, 110) + ylim(0, 110) p_combined &lt;- plot_grid(plot_grid(p1, p3, ncol = 1), plot_grid(p2, NULL, ncol = 1, rel_heights = c(0.53, 0.47)), ncol = 2 ) p_combined sessionInfo() ## R version 4.2.3 (2023-03-15) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Big Sur ... 10.16 ## ## Matrix products: default ## BLAS: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] stringr_1.5.0 reshape2_1.4.4 rlist_0.4.6.2 rcompanion_2.4.30 ## [5] scales_1.2.1 dendextend_1.17.2 cluster_2.1.4 NbClust_3.0.1 ## [9] factoextra_1.0.7 DT_0.27 cowplot_1.1.1 ggrepel_0.9.3 ## [13] ggplot2_3.4.2 umap_0.2.10.0 reticulate_1.28 ## ## loaded via a namespace (and not attached): ## [1] matrixStats_0.63.0 httr_1.4.6 rprojroot_2.0.3 R.cache_0.16.0 ## [5] tools_4.2.3 bslib_0.4.2 utf8_1.2.3 R6_2.5.1 ## [9] nortest_1.0-4 colorspace_2.1-0 withr_2.5.0 tidyselect_1.2.0 ## [13] gridExtra_2.3 Exact_3.2 compiler_4.2.3 cli_3.6.1 ## [17] expm_0.999-7 sandwich_3.0-2 bookdown_0.34 sass_0.4.6 ## [21] lmtest_0.9-40 mvtnorm_1.1-3 proxy_0.4-27 askpass_1.1 ## [25] multcompView_0.1-9 digest_0.6.31 rmarkdown_2.21 R.utils_2.12.2 ## [29] pkgconfig_2.0.3 htmltools_0.5.5 styler_1.9.1 fastmap_1.1.1 ## [33] highr_0.10 htmlwidgets_1.6.2 rlang_1.1.1 readxl_1.4.2 ## [37] rstudioapi_0.14 jquerylib_0.1.4 generics_0.1.3 zoo_1.8-12 ## [41] jsonlite_1.8.4 crosstalk_1.2.0 dplyr_1.1.2 R.oo_1.25.0 ## [45] magrittr_2.0.3 modeltools_0.2-23 Matrix_1.5-4 Rcpp_1.0.10 ## [49] DescTools_0.99.48 munsell_0.5.0 fansi_1.0.4 viridis_0.6.3 ## [53] lifecycle_1.0.3 R.methodsS3_1.8.2 stringi_1.7.12 multcomp_1.4-23 ## [57] yaml_2.3.7 MASS_7.3-60 rootSolve_1.8.2.3 plyr_1.8.8 ## [61] grid_4.2.3 parallel_4.2.3 lmom_2.9 lattice_0.21-8 ## [65] splines_4.2.3 knitr_1.42 pillar_1.9.0 boot_1.3-28.1 ## [69] gld_2.6.6 codetools_0.2-19 stats4_4.2.3 glue_1.6.2 ## [73] evaluate_0.21 data.table_1.14.8 png_0.1-8 vctrs_0.6.2 ## [77] cellranger_1.1.0 gtable_0.3.3 openssl_2.0.6 purrr_1.0.1 ## [81] cachem_1.0.8 xfun_0.39 coin_1.4-2 libcoin_1.0-9 ## [85] e1071_1.7-13 RSpectra_0.16-1 class_7.3-22 survival_3.5-5 ## [89] viridisLite_0.4.2 tibble_3.2.1 ellipsis_0.3.2 TH.data_1.1-2 ## [93] here_1.0.1 session_info.show() ## ----- ## Bio 1.78 ## joblib 1.1.1 ## numpy 1.19.0 ## pandas 1.3.2 ## purf NA ## scipy 1.8.0 ## session_info 1.0.0 ## sklearn 0.24.2 ## ----- ## Python 3.8.2 (default, Mar 26 2020, 10:45:18) [Clang 4.0.1 (tags/RELEASE_401/final)] ## macOS-10.16-x86_64-i386-64bit ## ----- ## Session information updated at 2023-05-18 12:35 "],["id_06_top_candidate_comparisons.html", "Section 6 Top candidate comparisons 6.1 Clustering analysis 6.2 Gene ontology analysis 6.3 Candidate antigen characterization", " Section 6 Top candidate comparisons 6.1 Clustering analysis 6.1.1 Analysis In R: library(DT) library(factoextra) library(NbClust) library(cluster) library(ggplot2) library(cowplot) pfpv_data &lt;- read.csv(&quot;./data/supplementary_data_5_pfpv_purf_oob_predictions.csv&quot;, row.names = 1, check.names = FALSE) pfpv_data &lt;- pfpv_data[order(-pfpv_data$`OOB score filtered`), ] pfpv_threshold &lt;- pfpv_data[pfpv_data$antigen_label == 1, ]$`OOB score filtered`[sum(pfpv_data$antigen_label == 1) / 2] top_pf_pfpv &lt;- rownames(pfpv_data[pfpv_data$species == &quot;pf&quot; &amp; pfpv_data$antigen_label == 0 &amp; pfpv_data$`OOB score filtered` &gt;= pfpv_threshold, ]) top_pv_pfpv &lt;- rownames(pfpv_data[pfpv_data$species == &quot;pv&quot; &amp; pfpv_data$antigen_label == 0 &amp; pfpv_data$`OOB score filtered` &gt;= pfpv_threshold, ]) pfpv_prox &lt;- read.csv(&quot;~/Downloads/pfpv_proximity_values.csv&quot;, check.names = FALSE) pfpv_dist &lt;- 1 - pfpv_prox rownames(pfpv_dist) &lt;- colnames(pfpv_dist) pfpv_dist &lt;- pfpv_dist[ rownames(pfpv_dist) %in% c(top_pf_pfpv, top_pv_pfpv), colnames(pfpv_dist) %in% c(top_pf_pfpv, top_pv_pfpv) ] rm(pfpv_prox) # Gap statistic gap_stat &lt;- clusGap(pfpv_dist, K.max = 10, hcut, B = 100, hc_method = &quot;ward.D2&quot;) p0_1 &lt;- fviz_gap_stat(gap_stat, maxSE = list(method = &quot;Tibs2001SEmax&quot;, SE.factor = 2)) + labs(title = &quot;Gap statistic method&quot;) # Silhouette method p0_2 &lt;- fviz_nbclust(pfpv_dist, k.max = 10, hcut, hc_method = &quot;ward.D2&quot;, method = &quot;silhouette&quot;) + labs(title = &quot;Silhouette method&quot;) # Elbow method p0_3 &lt;- fviz_nbclust(pfpv_dist, k.max = 10, hcut, hc_method = &quot;ward.D2&quot;, method = &quot;wss&quot;) + geom_vline(xintercept = 3, linetype = 2, color = &quot;steelblue&quot;) + labs(title = &quot;Elbow method&quot;) save(p0_1, p0_2, p0_3, file = &quot;./rdata/top_candidate_optimal_num_clusters.RData&quot;) library(umap) library(ggplot2) library(ggrepel) library(cowplot) top_pfpv_hc &lt;- hclust(as.dist(pfpv_dist), method = &quot;ward.D2&quot;) top_pfpv_2_clusters &lt;- cutree(top_pfpv_hc, k = 2) top_pfpv_3_clusters &lt;- cutree(top_pfpv_hc, k = 3) top_pfpv_2_clusters[top_pfpv_2_clusters == 1] &lt;- 4 top_pfpv_2_clusters[top_pfpv_2_clusters == 2] &lt;- 3 top_pfpv_2_clusters &lt;- top_pfpv_2_clusters - 2 top_pfpv_3_clusters[top_pfpv_3_clusters == 1] &lt;- 5 top_pfpv_3_clusters[top_pfpv_3_clusters == 2] &lt;- 6 top_pfpv_3_clusters[top_pfpv_3_clusters == 3] &lt;- 4 top_pfpv_3_clusters &lt;- top_pfpv_3_clusters - 3 save(top_pfpv_2_clusters, top_pfpv_3_clusters, file = &quot;./rdata/top_candidate_clusters.RData&quot; ) clusters &lt;- top_pfpv_2_clusters data &lt;- read.csv(&quot;./data/supplementary_data_5_pfpv_purf_oob_predictions.csv&quot;, row.names = 1, check.names = FALSE) load(&quot;./rdata/pfpv_prox_mds_umap.RData&quot;) umap_df_ &lt;- umap_df umap_df$label &lt;- data$antigen_label umap_df &lt;- rbind(umap_df[umap_df$label == 1, ], umap_df[rownames(umap_df) %in% names(clusters), ]) umap_df$group &lt;- &quot;&quot; umap_df$group[umap_df$label == 1] &lt;- &quot;Known antigen&quot; umap_df$group[rownames(umap_df) %in% c(&quot;PF3D7_0304600.1-p1&quot;, &quot;PF3D7_0424100.1-p1&quot;, &quot;PF3D7_0206900.1-p1&quot;, &quot;PF3D7_0209000.1-p1&quot;)] &lt;- &quot;Reference antigen&quot; umap_df$group[rownames(umap_df) %in% names(clusters)[clusters == 1]] &lt;- &quot;Group 1&quot; umap_df$group[rownames(umap_df) %in% names(clusters)[clusters == 2]] &lt;- &quot;Group 2&quot; umap_df_text &lt;- umap_df[umap_df$label == 1, ] umap_df_text$label_text &lt;- &quot;&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PF3D7_0304600.1-p1&quot;] &lt;- &quot;PfCSP&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PF3D7_0424100.1-p1&quot;] &lt;- &quot;RH5&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PF3D7_0206900.1-p1&quot;] &lt;- &quot;MSP5&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PF3D7_0209000.1-p1&quot;] &lt;- &quot;P230&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PVP01_0835600.1-p1&quot;] &lt;- &quot;PvCSP&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PVP01_0623800.1-p1&quot;] &lt;- &quot;DBP&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PVP01_0728900.1-p1&quot;] &lt;- &quot;MSP1&quot; umap_p1 &lt;- ggplot() + geom_point(data = umap_df_, aes(x = X1, y = X2), color = &quot;grey90&quot;, alpha = 0.5) + geom_point( data = umap_df[umap_df$label == 1, ], aes(x = X1, y = X2), shape = 21, color = &quot;black&quot;, fill = &quot;#FFFF33&quot;, stroke = 0.3, size = 2, alpha = 0.5 ) + geom_point(data = umap_df[umap_df$label == 0, ], aes(x = X1, y = X2, fill = group), shape = 21, alpha = 0.5) + geom_text_repel( data = umap_df_text, aes(x = X1, y = X2, label = label_text), size = 3.5, nudge_x = 1.5, nudge_y = -1, point.padding = 0.1 ) + scale_fill_manual(breaks = c(&quot;Group 1&quot;, &quot;Group 2&quot;), values = c(&quot;#03a1fc&quot;, &quot;#984EA3&quot;)) + theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.margin = ggplot2::margin(5, 5, 5, 5, &quot;pt&quot;), axis.title = element_text(colour = &quot;black&quot;), axis.text = element_text(colour = &quot;black&quot;), legend.position = &quot;bottom&quot; ) + guides(fill = guide_legend(title = &quot;&quot;)) + xlab(&quot;Dimension 1&quot;) + ylab(&quot;Dimension 2&quot;) clusters &lt;- top_pfpv_3_clusters data &lt;- read.csv(&quot;./data/supplementary_data_5_pfpv_purf_oob_predictions.csv&quot;, row.names = 1, check.names = FALSE) load(&quot;./rdata/pfpv_prox_mds_umap.RData&quot;) umap_df_ &lt;- umap_df umap_df$label &lt;- data$antigen_label umap_df &lt;- rbind(umap_df[umap_df$label == 1, ], umap_df[rownames(umap_df) %in% names(clusters), ]) umap_df$group &lt;- &quot;&quot; umap_df$group[umap_df$label == 1] &lt;- &quot;Known antigen&quot; umap_df$group[rownames(umap_df) %in% c(&quot;PF3D7_0304600.1-p1&quot;, &quot;PF3D7_0424100.1-p1&quot;, &quot;PF3D7_0206900.1-p1&quot;, &quot;PF3D7_0209000.1-p1&quot;)] &lt;- &quot;Reference antigen&quot; umap_df$group[rownames(umap_df) %in% names(clusters)[clusters == 1]] &lt;- &quot;Group 1&quot; umap_df$group[rownames(umap_df) %in% names(clusters)[clusters == 2]] &lt;- &quot;Group 2&quot; umap_df$group[rownames(umap_df) %in% names(clusters)[clusters == 3]] &lt;- &quot;Group 3&quot; umap_df_text &lt;- umap_df[umap_df$label == 1, ] umap_df_text$label_text &lt;- &quot;&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PF3D7_0304600.1-p1&quot;] &lt;- &quot;PfCSP&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PF3D7_0424100.1-p1&quot;] &lt;- &quot;RH5&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PF3D7_0206900.1-p1&quot;] &lt;- &quot;MSP5&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PF3D7_0209000.1-p1&quot;] &lt;- &quot;P230&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PVP01_0835600.1-p1&quot;] &lt;- &quot;PvCSP&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PVP01_0623800.1-p1&quot;] &lt;- &quot;DBP&quot; umap_df_text$label_text[rownames(umap_df_text) == &quot;PVP01_0728900.1-p1&quot;] &lt;- &quot;MSP1&quot; umap_p2 &lt;- ggplot() + geom_point(data = umap_df_, aes(x = X1, y = X2), color = &quot;grey90&quot;, alpha = 0.5) + geom_point( data = umap_df[umap_df$label == 1, ], aes(x = X1, y = X2), shape = 21, color = &quot;black&quot;, fill = &quot;#FFFF33&quot;, stroke = 0.3, size = 2, alpha = 0.5 ) + geom_point(data = umap_df[umap_df$label == 0, ], aes(x = X1, y = X2, fill = group), shape = 21, alpha = 0.5) + geom_text_repel( data = umap_df_text, aes(x = X1, y = X2, label = label_text), size = 3.5, nudge_x = 1.5, nudge_y = -1, point.padding = 0.1 ) + scale_fill_manual( breaks = c(&quot;Group 1&quot;, &quot;Group 2&quot;, &quot;Group 3&quot;), values = c(&quot;#03a1fc&quot;, &quot;#984EA3&quot;, &quot;#FF7F00&quot;) ) + theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.margin = ggplot2::margin(5, 5, 5, 5, &quot;pt&quot;), axis.title = element_text(colour = &quot;black&quot;), axis.text = element_text(colour = &quot;black&quot;), legend.position = &quot;bottom&quot; ) + guides(fill = guide_legend(title = &quot;&quot;)) + xlab(&quot;Dimension 1&quot;) + ylab(&quot;Dimension 2&quot;) umap_p_combined &lt;- plot_grid(umap_p1, umap_p2, nrow = 1, labels = c(&quot;a&quot;, &quot;b&quot;)) umap_p_combined load(file = &quot;./rdata/top_candidate_clusters.RData&quot;) species &lt;- c(rep(&quot;pf&quot;, 145), rep(&quot;pv&quot;, 45)) cat(&quot;Two clusters\\n&quot;) ## Two clusters table(top_pfpv_2_clusters, species) ## species ## top_pfpv_2_clusters pf pv ## 1 0 35 ## 2 145 10 cat(&quot;Three clusters\\n&quot;) ## Three clusters table(top_pfpv_3_clusters, species) ## species ## top_pfpv_3_clusters pf pv ## 1 0 35 ## 2 107 9 ## 3 38 1 protein_id_1 &lt;- names(top_pfpv_3_clusters)[top_pfpv_3_clusters == 1] protein_id_2 &lt;- names(top_pfpv_3_clusters)[top_pfpv_3_clusters == 2] protein_id_3 &lt;- names(top_pfpv_3_clusters)[top_pfpv_3_clusters == 3] save(protein_id_1, protein_id_2, protein_id_3, file = &quot;./rdata/clustering_groups.RData&quot;) gene_accession_1 &lt;- str_replace_all(protein_id_1, &quot;\\\\.[1-9]-p1&quot;, &quot;&quot;) gene_accession_2 &lt;- str_replace_all(protein_id_2, &quot;\\\\.[1-9]-p1&quot;, &quot;&quot;) gene_accession_3 &lt;- str_replace_all(protein_id_3, &quot;\\\\.[1-9]-p1&quot;, &quot;&quot;) write.table(data.frame(&quot;acc&quot; = gene_accession_1), sep = &quot;, &quot;, row.names = FALSE, col.names = FALSE, file = &quot;./other_data/top_candidates_gene_accession_1.csv&quot; ) write.table(data.frame(&quot;acc&quot; = gene_accession_2), sep = &quot;, &quot;, row.names = FALSE, col.names = FALSE, file = &quot;./other_data/top_candidates_gene_accession_2.csv&quot; ) write.table(data.frame(&quot;acc&quot; = gene_accession_3), sep = &quot;, &quot;, row.names = FALSE, col.names = FALSE, file = &quot;./other_data/top_candidates_gene_accession_3.csv&quot; ) 6.2 Gene ontology analysis 6.2.1 Analysis In Bash: python ./other_data/goea.py -s &quot;./other_data/top_candidates_gene_accession_1.csv&quot; \\ -p &quot;./other_data/PlasmoDB-62_pfpv_GO.gaf&quot; \\ -n &quot;./other_data/go-basic.obo&quot; \\ -o &quot;./other_data/goea_result_1.xlsx&quot; python ./other_data/goea.py -s &quot;./other_data/top_candidates_gene_accession_2.csv&quot; \\ -p &quot;./other_data/PlasmoDB-62_pfpv_GO.gaf&quot; \\ -n &quot;./other_data/go-basic.obo&quot; \\ -o &quot;./other_data/goea_result_2.xlsx&quot; python ./other_data/goea.py -s &quot;./other_data/top_candidates_gene_accession_3.csv&quot; \\ -p &quot;./other_data/PlasmoDB-62_pfpv_GO.gaf&quot; \\ -n &quot;./other_data/go-basic.obo&quot; \\ -o &quot;./other_data/goea_result_3.xlsx&quot; 6.2.2 Plotting In R: library(ggplot2) library(gridExtra) library(shadowtext) library(ggforce) library(reshape) library(cowplot) library(scales) process_goea_res &lt;- function(file_name) { data &lt;- read.csv(file_name, header = TRUE, fill = TRUE, quote = &#39;\\&quot;&#39;, stringsAsFactors = FALSE) # calculate percentage from the ratio column data$num_genes &lt;- apply(data, 1, function(x) as.integer(unlist(strsplit(x[&quot;ratio_in_study&quot;], &quot;/&quot;))[1])) # select for enrichment (e) data rows data &lt;- data[data$enrichment == &quot;e&quot;, ] # select for biological process (BP) data rows res_bp &lt;- data[data$NS == &quot;BP&quot;, ] res_bp$`-Log10FDR` &lt;- -log10(res_bp$p_fdr_bh) res_bp &lt;- res_bp[order(res_bp$`-Log10FDR`), ] res_bp$group &lt;- rep(&quot;Biological process&quot;, nrow(res_bp)) # select for cellular component (CC) data rows res_cc &lt;- data[data$NS == &quot;CC&quot;, ] res_cc$`-Log10FDR` &lt;- -log10(res_cc$p_fdr_bh) res_cc &lt;- res_cc[order(res_cc$`-Log10FDR`), ] res_cc$group &lt;- rep(&quot;Cellular component&quot;, nrow(res_cc)) # select for molecular function (MF) data rows res_mf &lt;- data[data$NS == &quot;MF&quot;, ] res_mf$`-Log10FDR` &lt;- -log10(res_mf$p_fdr_bh) res_mf &lt;- res_mf[order(res_mf$`-Log10FDR`), ] res_mf$group &lt;- rep(&quot;Molecular function&quot;, nrow(res_mf)) ds &lt;- do.call(rbind, list(res_mf, res_cc, res_bp)) ds$name &lt;- factor(ds$name, levels = ds$name) ds$group &lt;- factor(ds$group, levels = c(&quot;Biological process&quot;, &quot;Cellular component&quot;, &quot;Molecular function&quot;)) return(ds) } ds_1 &lt;- process_goea_res(&quot;./other_data/goea_result_1.csv&quot;) ds_2 &lt;- process_goea_res(&quot;./other_data/goea_result_2.csv&quot;) ds_3 &lt;- process_goea_res(&quot;./other_data/goea_result_3.csv&quot;) p1 &lt;- ggplot(ds_1, aes(x = name, y = `-Log10FDR`)) + geom_col(width = 0.05) + geom_point(size = 5, shape = 21, color = &quot;black&quot;, fill = &quot;grey20&quot;) + geom_text(aes(label = sprintf(&quot;%.0f&quot;, num_genes)), nudge_y = 0, size = 2.5, color = &quot;white&quot;) + scale_x_discrete(labels = label_wrap(50)) + coord_flip() + ggforce::facet_col(facets = vars(group), scales = &quot;free_y&quot;, space = &quot;free&quot;) + theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.spacing = unit(0, &quot;pt&quot;), strip.background = element_blank(), panel.border = element_rect(colour = &quot;black&quot;, size = 0.5), plot.title = element_text(hjust = 0.5), plot.margin = ggplot2::margin(5, 5, 85, 5, &quot;pt&quot;), legend.text = element_text(colour = &quot;black&quot;, ), axis.title.x = element_text(colour = &quot;black&quot;, ), axis.title.y = element_text(colour = &quot;black&quot;, ), axis.text.x = element_text(colour = &quot;black&quot;, ), axis.text.y = element_text(colour = &quot;black&quot;, ) ) + xlab(&quot;&quot;) + ylab(expression(&quot;-Log&quot;[10] * &quot;FDR&quot;)) + ggtitle(&quot;Group 1 (35 candidates)&quot;) p2 &lt;- ggplot(ds_2, aes(x = name, y = `-Log10FDR`)) + geom_col(width = 0.05) + geom_point(size = 5, shape = 21, color = &quot;black&quot;, fill = &quot;grey20&quot;) + geom_text(aes(label = sprintf(&quot;%.0f&quot;, num_genes)), nudge_y = 0, size = 2.5, color = &quot;white&quot;) + scale_x_discrete(labels = label_wrap(50)) + coord_flip() + ggforce::facet_col(facets = vars(group), scales = &quot;free_y&quot;, space = &quot;free&quot;) + theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.spacing = unit(0, &quot;pt&quot;), strip.background = element_blank(), panel.border = element_rect(colour = &quot;black&quot;, size = 0.5), plot.title = element_text(hjust = 0.5), plot.margin = ggplot2::margin(5, 0, 5, 5, &quot;pt&quot;), legend.text = element_text(colour = &quot;black&quot;, ), axis.title.x = element_text(colour = &quot;black&quot;, ), axis.title.y = element_text(colour = &quot;black&quot;, ), axis.text.x = element_text(colour = &quot;black&quot;, ), axis.text.y = element_text(colour = &quot;black&quot;, ) ) + xlab(&quot;&quot;) + ylab(expression(&quot;-Log&quot;[10] * &quot;FDR&quot;)) + ggtitle(&quot;Group 2 (116 candidates)&quot;) p3 &lt;- ggplot(ds_3, aes(x = name, y = `-Log10FDR`)) + geom_col(width = 0.05) + geom_point(size = 5, shape = 21, color = &quot;black&quot;, fill = &quot;grey20&quot;) + geom_text(aes(label = sprintf(&quot;%.0f&quot;, num_genes)), nudge_y = 0, size = 2.5, color = &quot;white&quot;) + scale_x_discrete(labels = label_wrap(50)) + coord_flip() + ggforce::facet_col(facets = vars(group), scales = &quot;free_y&quot;, space = &quot;free&quot;) + theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.spacing = unit(0, &quot;pt&quot;), strip.background = element_blank(), panel.border = element_rect(colour = &quot;black&quot;, size = 0.5), plot.title = element_text(hjust = 0.5), plot.margin = ggplot2::margin(5, 5, 5, 0, &quot;pt&quot;), legend.text = element_text(colour = &quot;black&quot;, ), axis.title.x = element_text(colour = &quot;black&quot;, ), axis.title.y = element_text(colour = &quot;black&quot;, ), axis.text.x = element_text(colour = &quot;black&quot;, ), axis.text.y = element_text(colour = &quot;black&quot;, ) ) + xlab(&quot;&quot;) + ylab(expression(&quot;-Log&quot;[10] * &quot;FDR&quot;)) + ggtitle(&quot;Group 3 (39 candidates)&quot;) Final plot p_combined &lt;- plot_grid(p1, p2, p3, nrow = 1, rel_widths = c(0.3, 0.3, 0.3), labels = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)) p_combined 6.3 Candidate antigen characterization 6.3.1 Processing table In R: library(tibble) prediction &lt;- read.csv(&quot;./data/supplementary_data_5_pfpv_purf_oob_predictions.csv&quot;, row.names = 1, check.names = FALSE) prediction &lt;- prediction[order(-prediction$`OOB score filtered`), ] threshold &lt;- prediction[prediction$antigen_label == 1, ]$`OOB score filtered`[sum(prediction$antigen_label == 1) / 2] labeled_pos &lt;- rownames(prediction)[prediction$antigen_label == 1] top_pfpv &lt;- rownames(prediction[prediction$antigen_label == 0 &amp; prediction$`OOB score filtered` &gt;= threshold, ]) pfpv_prox &lt;- read.csv(&quot;~/Downloads/pfpv_proximity_values.csv&quot;, check.names = FALSE) pfpv_dist &lt;- 1 - pfpv_prox rm(pfpv_prox) rownames(pfpv_dist) &lt;- colnames(pfpv_dist) pfpv_dist &lt;- pfpv_dist[, labeled_pos] ds &lt;- prediction[c(labeled_pos, top_pfpv), &quot;OOB score filtered&quot;, drop = FALSE] ds &lt;- rownames_to_column(ds, &quot;Protein ID&quot;) colnames(ds)[2] &lt;- &quot;Score&quot; # Add clustering groups load(file = &quot;./rdata/clustering_groups.RData&quot;) ds$Group &lt;- &quot;&quot; ds$Group[ds$`Protein ID` %in% protein_id_1] &lt;- &quot;Group 1&quot; ds$Group[ds$`Protein ID` %in% protein_id_2] &lt;- &quot;Group 2&quot; ds$Group[ds$`Protein ID` %in% protein_id_3] &lt;- &quot;Group 3&quot; ds$Group[ds$`Protein ID` %in% labeled_pos] &lt;- &quot;Known antigen&quot; ds$Group[ds$`Protein ID` %in% c( &quot;PF3D7_0304600.1-p1&quot;, &quot;PF3D7_0424100.1-p1&quot;, &quot;PF3D7_0206900.1-p1&quot;, &quot;PF3D7_0209000.1-p1&quot;, &quot;PVP01_0835600.1-p1&quot;, &quot;PVP01_0623800.1-p1&quot;, &quot;PVP01_0728900.1-p1&quot; )] &lt;- &quot;Reference antigen&quot; # Add gene products gene_products &lt;- rbind( read.csv(&quot;./other_data/pf3d7_gene_products_v62.csv&quot;), read.csv(&quot;./other_data/pvp01_gene_products_v62.csv&quot;) ) colnames(gene_products) &lt;- c(&quot;Protein ID&quot;, &quot;Gene product&quot;) ds &lt;- merge(x = ds, y = gene_products, by = &quot;Protein ID&quot;, all.x = TRUE) # Add closest reference antigen and the distance pfpv_ad_ctrl_res &lt;- read.csv(&quot;./other_data/pfpv_ad_ctrl_res.csv&quot;, check.names = FALSE, row.names = 1) ds$`Closest known antigen` &lt;- &quot;&quot; ds$`Known antigen source` &lt;- &quot;Intersect&quot; ds$`Closest distance` &lt;- -1 for (i in 1:nrow(ds)) { prot &lt;- ds$`Protein ID`[i] tmp &lt;- pfpv_dist[prot, ] ds[i, &quot;Closest known antigen&quot;] &lt;- names(tmp)[which.min(tmp)] ds[i, &quot;Closest known antigen&quot;] &lt;- paste0( ds[i, &quot;Closest known antigen&quot;], &quot; (&quot;, gene_products[ gene_products$`Protein ID` == ds[i, &quot;Closest known antigen&quot;], &quot;Gene product&quot; ], &quot;)&quot; ) if (names(tmp)[which.min(tmp)] %in% c( &quot;PF3D7_0304600.1-p1&quot;, &quot;PF3D7_0424100.1-p1&quot;, &quot;PF3D7_0206900.1-p1&quot;, &quot;PF3D7_0209000.1-p1&quot;, &quot;PVP01_0835600.1-p1&quot;, &quot;PVP01_0623800.1-p1&quot;, &quot;PVP01_0728900.1-p1&quot; )) { ds[i, &quot;Known antigen source&quot;] &lt;- &quot;Reference&quot; } else { ds[i, &quot;Known antigen source&quot;] &lt;- pfpv_ad_ctrl_res[names(tmp)[which.min(tmp)], &quot;source&quot;] } ds[i, &quot;Closest distance&quot;] &lt;- tmp[which.min(tmp)] } # Sort based on scores ds &lt;- ds[order(-ds$Score), ] write.csv(ds, file = &quot;./data/supplementary_data_6_antigen_characterization.csv&quot;, row.names = FALSE) sessionInfo() ## R version 4.2.3 (2023-03-15) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Big Sur ... 10.16 ## ## Matrix products: default ## BLAS: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] tibble_3.2.1 scales_1.2.1 reshape_0.8.9 ggforce_0.4.1 ## [5] shadowtext_0.1.2 gridExtra_2.3 ggrepel_0.9.3 umap_0.2.10.0 ## [9] cowplot_1.1.1 cluster_2.1.4 NbClust_3.0.1 factoextra_1.0.7 ## [13] ggplot2_3.4.2 DT_0.27 ## ## loaded via a namespace (and not attached): ## [1] Rcpp_1.0.10 lattice_0.21-8 png_0.1-8 digest_0.6.31 ## [5] utf8_1.2.3 RSpectra_0.16-1 R6_2.5.1 plyr_1.8.8 ## [9] evaluate_0.21 highr_0.10 pillar_1.9.0 rlang_1.1.1 ## [13] rstudioapi_0.14 jquerylib_0.1.4 R.utils_2.12.2 R.oo_1.25.0 ## [17] Matrix_1.5-4 reticulate_1.28 rmarkdown_2.21 styler_1.9.1 ## [21] htmlwidgets_1.6.2 polyclip_1.10-4 munsell_0.5.0 compiler_4.2.3 ## [25] xfun_0.39 pkgconfig_2.0.3 askpass_1.1 htmltools_0.5.5 ## [29] openssl_2.0.6 tidyselect_1.2.0 bookdown_0.34 codetools_0.2-19 ## [33] fansi_1.0.4 dplyr_1.1.2 withr_2.5.0 MASS_7.3-60 ## [37] R.methodsS3_1.8.2 grid_4.2.3 jsonlite_1.8.4 gtable_0.3.3 ## [41] lifecycle_1.0.3 magrittr_2.0.3 cli_3.6.1 cachem_1.0.8 ## [45] farver_2.1.1 bslib_0.4.2 generics_0.1.3 vctrs_0.6.2 ## [49] tools_4.2.3 R.cache_0.16.0 glue_1.6.2 tweenr_2.0.2 ## [53] purrr_1.0.1 fastmap_1.1.1 yaml_2.3.7 colorspace_2.1-0 ## [57] knitr_1.42 sass_0.4.6 "],["id_07_summary_of_candidates.html", "Section 7 Summary of candidates", " Section 7 Summary of candidates The table provides a summary of the top antigen candidates and the 90 known P. vivax and P. falciparum antigens, including the 7 reference antigens. The table contains columns for protein IDs, probability scores, antigen/candidate groups, gene products, closest known antigens, the source of the closest known antigen, and the distance to the closest antigens. Grey bars in the table show probability scores or closest euclidean distances, with values ranging from 0 to 1. To access additional information in the rightmost columns, scroll horizontally. For column filtering, click on the white boxes below the headers and type in threshold criteria (e.g., “PVP01” to select P. vivax proteins). You can also arrange values in ascending or descending order by selecting the arrows adjacent to the headers. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
